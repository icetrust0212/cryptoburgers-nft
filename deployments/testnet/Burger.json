{
  "address": "0x987F3d14DC9390a6a507c90d1a26D33C74e8E610",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "_boxType",
          "type": "uint8"
        }
      ],
      "name": "MintNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "boxPriceBNB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "boxPriceBURG",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBaseTokenURI",
          "type": "string"
        }
      ],
      "name": "changeBaseTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        }
      ],
      "name": "changeRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newState",
          "type": "bool"
        }
      ],
      "name": "changeWhitelistState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getboxTypeById",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "boxType",
          "type": "uint8"
        }
      ],
      "name": "mintNormal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "boxType",
          "type": "uint8"
        }
      ],
      "name": "mintNormalBURG",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "boxType",
          "type": "uint8"
        }
      ],
      "name": "mintOwner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "mintWhitelist",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleBNBEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleBURGEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "setBURGAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strBaseTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_newBoxPricesBNB",
          "type": "uint256[]"
        }
      ],
      "name": "updateBoxPricesBNB",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_newBoxPricesBURG",
          "type": "uint256[]"
        }
      ],
      "name": "updateBoxPricesBURG",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcc91a4c8b8f15da99dfe82191c1d286812aae976a3eb38316a4d7dff23514868",
  "receipt": {
    "to": null,
    "from": "0xc09eAC15f9Ba6462e8E4612af7C431E1cfe08b87",
    "contractAddress": "0x987F3d14DC9390a6a507c90d1a26D33C74e8E610",
    "transactionIndex": 24,
    "gasUsed": "5435061",
    "logsBloom": "0x
    "blockHash": "0xd7e0825356b7b45bb2dde7faaa69c0836cc50d2c670d37757406be598e695bd9",
    "transactionHash": "0xcc91a4c8b8f15da99dfe82191c1d286812aae976a3eb38316a4d7dff23514868",
    "logs": [
      {
        "transactionIndex": 24,
        "blockNumber": 9644714,
        "transactionHash": "0xcc91a4c8b8f15da99dfe82191c1d286812aae976a3eb38316a4d7dff23514868",
        "address": "0x987F3d14DC9390a6a507c90d1a26D33C74e8E610",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c09eac15f9ba6462e8e4612af7c431e1cfe08b87"
        ],
        "data": "0x",
        "logIndex": 60,
        "blockHash": "0xd7e0825356b7b45bb2dde7faaa69c0836cc50d2c670d37757406be598e695bd9"
      }
    ],
    "blockNumber": 9644714,
    "cumulativeGasUsed": "8477645",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f1427d85a967a9ddd1af65e6ebfbd2f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"_boxType\",\"type\":\"uint8\"}],\"name\":\"MintNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boxPriceBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boxPriceBURG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseTokenURI\",\"type\":\"string\"}],\"name\":\"changeBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"changeRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"changeWhitelistState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getboxTypeById\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"boxType\",\"type\":\"uint8\"}],\"name\":\"mintNormal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"boxType\",\"type\":\"uint8\"}],\"name\":\"mintNormalBURG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"boxType\",\"type\":\"uint8\"}],\"name\":\"mintOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"mintWhitelist\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleBNBEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleBURGEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setBURGAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strBaseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newBoxPricesBNB\",\"type\":\"uint256[]\"}],\"name\":\"updateBoxPricesBNB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newBoxPricesBURG\",\"type\":\"uint256[]\"}],\"name\":\"updateBoxPricesBURG\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Burger.sol\":\"Burger\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BurgToken.sol\":{\"content\":\"/*\\r\\nCRYPTOBURGERS\\r\\nWeb: https://cryptoburgers.io\\r\\nTelegram: https://t.me/cryptoburgersnft\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/extensions/ERC20Capped.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/extensions/ERC20Pausable.sol\\\";\\r\\n\\r\\ncontract BurgToken is ERC20Capped, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address;\\r\\n\\r\\n    constructor() ERC20(\\\"BURG Token\\\", \\\"BURG\\\") ERC20Capped(100 * 1e6 * 1e18) {\\r\\n        _mint(msg.sender, 10000 * 1e18);\\r\\n    }\\r\\n\\r\\n    function burn(address _account, uint256 _amount) external returns (bool) {\\r\\n        _burn(_account, _amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function mint(address _account, uint256 _amount)\\r\\n        external\\r\\n        onlyOwner\\r\\n        returns (bool)\\r\\n    {\\r\\n        _mint(_account, _amount);\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x703bf8275a5d769ca7485efa8756cd862b53befeb82bb6c2921903f20590cb6f\",\"license\":\"MIT\"},\"contracts/Burger.sol\":{\"content\":\"/*\\r\\nCRYPTOBURGERS\\r\\nWeb: https://cryptoburgers.io\\r\\nTelegram: https://t.me/cryptoburgersnft\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"./BurgToken.sol\\\";\\r\\n\\r\\ncontract Burger is ERC721Enumerable, Pausable, Ownable, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address;\\r\\n\\r\\n    mapping(uint256 => uint8) private boxTypeById;\\r\\n\\r\\n    uint256[] public boxPriceBNB = [1e16, 2 * 1e16, 3 * 1e16];\\r\\n    uint256[] public boxPriceBURG = [1e16, 2 * 1e16, 3 * 1e16];\\r\\n\\r\\n    uint256 public whitelistPrice = 2 * 1e16;\\r\\n    // string public strBaseTokenURI =\\r\\n    //     \\\"https://backend.cryptoburgers.io/metadata/\\\";\\r\\n    string public strBaseTokenURI = \\r\\n            \\\"http://localhost:8080/api/metadta/\\\";\\r\\n\\r\\n    bool public saleBNBEnabled = true;\\r\\n    bool public saleBURGEnabled = true;\\r\\n\\r\\n    // Change to true in the mainnet deploy.\\r\\n    bool public whitelistActive = false;\\r\\n    bytes32 private root =\\r\\n        0xa2fc709bf2f4b9cb44b8a9114485d12d4877bb1beedd81f62f4f85a8056480ee;\\r\\n\\r\\n    address BURG;\\r\\n\\r\\n    event MintNFT(\\r\\n        address indexed _to,\\r\\n        uint256 indexed _id,\\r\\n        uint8 indexed _boxType\\r\\n    );\\r\\n\\r\\n    constructor() ERC721(\\\"Burger\\\", \\\"BURGER\\\") {\\r\\n        // Uncomment if we want deploy paused\\r\\n        // _pause();\\r\\n    }\\r\\n\\r\\n    function _leaf(address account) internal pure returns (bytes32)\\r\\n    {\\r\\n        return keccak256(abi.encodePacked(account));\\r\\n    }\\r\\n\\r\\n    function mintWhitelist(bytes32[] memory proof)\\r\\n        external\\r\\n        payable\\r\\n        whenNotPaused\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(whitelistActive, \\\"Whitelist is not active\\\");\\r\\n        require(msg.value >= boxPriceBNB[1], \\\"Not enought BNB\\\");\\r\\n        bool isWhitelisted = verifyWhitelist(_leaf(msg.sender), proof);\\r\\n\\r\\n        if (isWhitelisted) {\\r\\n            mint(msg.sender, 2);\\r\\n        } else {\\r\\n            revert(\\\"Not whitelisted\\\");\\r\\n        }\\r\\n\\r\\n        payable(msg.sender).transfer(msg.value - boxPriceBNB[1]);\\r\\n    }\\r\\n\\r\\n    function mintOwner(address _to, uint8 boxType)\\r\\n        external\\r\\n        onlyOwner\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return mint(_to, boxType);\\r\\n    }\\r\\n\\r\\n    function mintNormal(uint8 boxType)\\r\\n        external\\r\\n        payable\\r\\n        whenNotPaused\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(!whitelistActive, \\\"Whitelist is active\\\");\\r\\n        require(saleBNBEnabled, \\\"Sales in BNB are not permitted\\\");\\r\\n        require(msg.value >= boxPriceBNB[boxType], \\\"Not enought BNB\\\");\\r\\n        uint256 idMinted = mint(msg.sender, boxType);\\r\\n        payable(msg.sender).transfer(msg.value - boxPriceBNB[boxType]);\\r\\n        return idMinted;\\r\\n    }\\r\\n\\r\\n    function mintNormalBURG(uint8 boxType)\\r\\n        external\\r\\n        whenNotPaused\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(!whitelistActive, \\\"Whitelist is active\\\");\\r\\n        require(saleBURGEnabled, \\\"Sales in BNB are not permitted\\\");\\r\\n        require(\\r\\n            IERC20(BURG).allowance(msg.sender, address(this)) >=\\r\\n                boxPriceBURG[boxType],\\r\\n            \\\"Not enought allowance\\\"\\r\\n        );\\r\\n\\r\\n        BurgToken(BURG).transferFrom(\\r\\n            msg.sender,\\r\\n            owner(),\\r\\n            boxPriceBURG[boxType].mul(8).div(100)\\r\\n        );\\r\\n        BurgToken(BURG).burn(msg.sender, boxPriceBURG[boxType].mul(92).div(100));\\r\\n\\r\\n        uint256 idMinted = mint(msg.sender, boxType);\\r\\n        return idMinted;\\r\\n    }\\r\\n\\r\\n    function mint(address _to, uint8 boxType) internal returns (uint256) {\\r\\n        _safeMint(_to, totalSupply());\\r\\n        boxTypeById[totalSupply()] = boxType;\\r\\n\\r\\n        emit MintNFT(_to, totalSupply() - 1, boxType);\\r\\n\\r\\n        return totalSupply() - 1;\\r\\n    }\\r\\n\\r\\n    function walletOfOwner(address _owner)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256 tokenCount = balanceOf(_owner);\\r\\n        uint256[] memory tokensId = new uint256[](tokenCount);\\r\\n        for (uint256 i = 0; i < tokenCount; i++) {\\r\\n            tokensId[i] = tokenOfOwnerByIndex(_owner, i);\\r\\n        }\\r\\n        return tokensId;\\r\\n    }\\r\\n\\r\\n    function withdraw() external onlyOwner {\\r\\n        uint256 balance = address(this).balance;\\r\\n        payable(owner()).transfer(balance);\\r\\n    }\\r\\n\\r\\n    function changeBaseTokenURI(string memory newBaseTokenURI)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        strBaseTokenURI = newBaseTokenURI;\\r\\n    }\\r\\n\\r\\n    function changeWhitelistState(bool newState) external onlyOwner {\\r\\n        whitelistActive = newState;\\r\\n    }\\r\\n\\r\\n    function changeRoot(bytes32 newRoot) external onlyOwner {\\r\\n        root = newRoot;\\r\\n    }\\r\\n\\r\\n    function verifyWhitelist(bytes32 leaf, bytes32[] memory proof)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        bytes32 computedHash = leaf;\\r\\n\\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            bytes32 proofElement = proof[i];\\r\\n\\r\\n            if (computedHash < proofElement) {\\r\\n                // Hash(current computed hash + current element of the proof)\\r\\n                computedHash = keccak256(\\r\\n                    abi.encodePacked(computedHash, proofElement)\\r\\n                );\\r\\n            } else {\\r\\n                // Hash(current element of the proof + current computed hash)\\r\\n                computedHash = keccak256(\\r\\n                    abi.encodePacked(proofElement, computedHash)\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Check if the computed hash (root) is equal to the provided root\\r\\n        return computedHash == root;\\r\\n    }\\r\\n\\r\\n    function updateBoxPricesBNB(uint256[] memory _newBoxPricesBNB)\\r\\n        external\\r\\n        onlyOwner\\r\\n        returns (bool)\\r\\n    {\\r\\n        boxPriceBNB = _newBoxPricesBNB;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function updateBoxPricesBURG(uint256[] memory _newBoxPricesBURG)\\r\\n        external\\r\\n        onlyOwner\\r\\n        returns (bool)\\r\\n    {\\r\\n        boxPriceBURG = _newBoxPricesBURG;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return strBaseTokenURI;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 _tokenId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(_exists(_tokenId), \\\"Token does not exist\\\");\\r\\n        return string(abi.encodePacked(_baseURI(), Strings.toString(_tokenId)));\\r\\n    }\\r\\n\\r\\n    function getboxTypeById(uint256 _tokenId) external view returns (uint8) {\\r\\n        require(_exists(_tokenId), \\\"Token does not exist\\\");\\r\\n        return boxTypeById[_tokenId];\\r\\n    }\\r\\n\\r\\n    function pause() external onlyOwner returns (bool) {\\r\\n        _pause();\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function unpause() external onlyOwner returns (bool) {\\r\\n        _unpause();\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setBURGAddress(address _newAddress)\\r\\n        external\\r\\n        onlyOwner\\r\\n        returns (bool)\\r\\n    {\\r\\n        BURG = _newAddress;\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x47ae3deb8a1e58ed8bfaa5546f735c70fead29a1f691867efe70128b2b1c5602\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf98cb1651a90d20ef77d8c1dd10d5fce4954e747603e5672a8292bd4368120dd\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/extensions/ERC20Capped.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\\n */\\nabstract contract ERC20Capped is ERC20 {\\n    uint256 private immutable _cap;\\n\\n    /**\\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\\n     * set once during construction.\\n     */\\n    constructor(uint256 cap_) {\\n        require(cap_ > 0, \\\"ERC20Capped: cap is 0\\\");\\n        _cap = cap_;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view virtual returns (uint256) {\\n        return _cap;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_mint}.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        require(ERC20.totalSupply() + amount <= cap(), \\\"ERC20Capped: cap exceeded\\\");\\n        super._mint(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x861c86995be13aae31adcd5d3fedd5a9777e1882fa1bca0a86115f63bda07de1\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb6d09c0a37d1222bff59fb166567558c057bab36b96a8457de29f25afd6e87b2\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040518060600160405280662386f26fc1000066ffffffffffffff16815260200166470de4df82000066ffffffffffffff168152602001666a94d74f43000066ffffffffffffff16815250600d906003620000619291906200033a565b506040518060600160405280662386f26fc1000066ffffffffffffff16815260200166470de4df82000066ffffffffffffff168152602001666a94d74f43000066ffffffffffffff16815250600e906003620000bf9291906200033a565b5066470de4df820000600f5560405180606001604052806022815260200162005ef06022913960109080519060200190620000fc92919062000397565b506001601160006101000a81548160ff0219169083151502179055506001601160016101000a81548160ff0219169083151502179055506000601160026101000a81548160ff0219169083151502179055507fa2fc709bf2f4b9cb44b8a9114485d12d4877bb1beedd81f62f4f85a8056480ee60001b6012553480156200018257600080fd5b506040518060400160405280600681526020017f42757267657200000000000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f425552474552000000000000000000000000000000000000000000000000000081525081600090805190602001906200020792919062000397565b5080600190805190602001906200022092919062000397565b5050506000600a60006101000a81548160ff0219169083151502179055506200025e620002526200026c60201b60201c565b6200027460201b60201c565b6001600b81905550620004ac565b600033905090565b6000600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82805482825590600052602060002090810192821562000384579160200282015b8281111562000383578251829066ffffffffffffff169055916020019190600101906200035b565b5b50905062000393919062000428565b5090565b828054620003a59062000476565b90600052602060002090601f016020900481019282620003c9576000855562000415565b82601f10620003e457805160ff191683800117855562000415565b8280016001018555821562000415579182015b8281111562000414578251825591602001919060010190620003f7565b5b50905062000424919062000428565b5090565b5b808211156200044357600081600090555060010162000429565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200048f57607f821691505b60208210811415620004a657620004a562000447565b5b50919050565b615a3480620004bc6000396000f3fe60806040526004361061025c5760003560e01c806370a0823111610144578063b88d4fde116100b6578063e0d5f5db1161007a578063e0d5f5db14610973578063e40e97a7146109b0578063e985e9c5146109d9578063f09542b314610a16578063f2fde38b14610a46578063fc1a1c3614610a6f5761025c565b8063b88d4fde1461087c578063c87b56dd146108a5578063ca847633146108e2578063d124d28f1461090d578063d9583b9f1461094a5761025c565b806387ddb7b71161010857806387ddb7b7146107465780638cba90b0146107835780638da5cb5b146107c057806395d89b41146107eb578063a22cb46514610816578063a69a6e821461083f5761025c565b806370a082311461064d578063715018a61461068a57806379d72794146106a15780637b125a1d146106de5780638456cb591461071b5761025c565b80632f745c59116101dd57806342842e0e116101a157806342842e0e14610526578063438b63001461054f57806344d843811461058c5780634f6ccce7146105a85780635c975abb146105e55780636352211e146106105761025c565b80632f745c5914610441578063329ea90d1461047e5780633ccfd60b146104bb5780633d59cd60146104d25780633f4ba83a146104fb5761025c565b8063120f91d511610224578063120f91d51461035a578063158d9ac31461039757806318160ddd146103c257806323b872dd146103ed57806329c7f1fa146104165761025c565b806301ffc9a71461026157806302ce58131461029e57806306fdde03146102c9578063081812fc146102f4578063095ea7b314610331575b600080fd5b34801561026d57600080fd5b5061028860048036038101906102839190613c06565b610a9a565b6040516102959190613c4e565b60405180910390f35b3480156102aa57600080fd5b506102b3610b14565b6040516102c09190613c4e565b60405180910390f35b3480156102d557600080fd5b506102de610b27565b6040516102eb9190613d02565b60405180910390f35b34801561030057600080fd5b5061031b60048036038101906103169190613d5a565b610bb9565b6040516103289190613dc8565b60405180910390f35b34801561033d57600080fd5b5061035860048036038101906103539190613e0f565b610c3e565b005b34801561036657600080fd5b50610381600480360381019061037c9190613d5a565b610d56565b60405161038e9190613e5e565b60405180910390f35b3480156103a357600080fd5b506103ac610d7a565b6040516103b99190613c4e565b60405180910390f35b3480156103ce57600080fd5b506103d7610d8d565b6040516103e49190613e5e565b60405180910390f35b3480156103f957600080fd5b50610414600480360381019061040f9190613e79565b610d9a565b005b34801561042257600080fd5b5061042b610dfa565b6040516104389190613c4e565b60405180910390f35b34801561044d57600080fd5b5061046860048036038101906104639190613e0f565b610e0d565b6040516104759190613e5e565b60405180910390f35b34801561048a57600080fd5b506104a560048036038101906104a0919061404a565b610eb2565b6040516104b29190613c4e565b60405180910390f35b3480156104c757600080fd5b506104d0610f6a565b005b3480156104de57600080fd5b506104f960048036038101906104f491906140a6565b61103c565b005b34801561050757600080fd5b506105106110c2565b60405161051d9190613c4e565b60405180910390f35b34801561053257600080fd5b5061054d60048036038101906105489190613e79565b61114f565b005b34801561055b57600080fd5b50610576600480360381019061057191906140d3565b61116f565b60405161058391906141be565b60405180910390f35b6105a660048036038101906105a191906141e0565b61121d565b005b3480156105b457600080fd5b506105cf60048036038101906105ca9190613d5a565b611449565b6040516105dc9190613e5e565b60405180910390f35b3480156105f157600080fd5b506105fa6114ba565b6040516106079190613c4e565b60405180910390f35b34801561061c57600080fd5b5061063760048036038101906106329190613d5a565b6114d1565b6040516106449190613dc8565b60405180910390f35b34801561065957600080fd5b50610674600480360381019061066f91906140d3565b611583565b6040516106819190613e5e565b60405180910390f35b34801561069657600080fd5b5061069f61163b565b005b3480156106ad57600080fd5b506106c860048036038101906106c39190614262565b6116c3565b6040516106d59190613e5e565b60405180910390f35b3480156106ea57600080fd5b50610705600480360381019061070091906140d3565b611753565b6040516107129190613c4e565b60405180910390f35b34801561072757600080fd5b5061073061181b565b60405161073d9190613c4e565b60405180910390f35b34801561075257600080fd5b5061076d60048036038101906107689190613d5a565b6118a8565b60405161077a9190613e5e565b60405180910390f35b34801561078f57600080fd5b506107aa60048036038101906107a59190613d5a565b6118cc565b6040516107b791906142b1565b60405180910390f35b3480156107cc57600080fd5b506107d561193e565b6040516107e29190613dc8565b60405180910390f35b3480156107f757600080fd5b50610800611968565b60405161080d9190613d02565b60405180910390f35b34801561082257600080fd5b5061083d600480360381019061083891906142f8565b6119fa565b005b34801561084b57600080fd5b50610866600480360381019061086191906143fb565b611b7b565b6040516108739190613c4e565b60405180910390f35b34801561088857600080fd5b506108a3600480360381019061089e91906144f9565b611c19565b005b3480156108b157600080fd5b506108cc60048036038101906108c79190613d5a565b611c7b565b6040516108d99190613d02565b60405180910390f35b3480156108ee57600080fd5b506108f7611cfd565b6040516109049190613d02565b60405180910390f35b34801561091957600080fd5b50610934600480360381019061092f919061457c565b611d8b565b6040516109419190613e5e565b60405180910390f35b34801561095657600080fd5b50610971600480360381019061096c91906145a9565b6121e8565b005b34801561097f57600080fd5b5061099a600480360381019061099591906143fb565b612281565b6040516109a79190613c4e565b60405180910390f35b3480156109bc57600080fd5b506109d760048036038101906109d29190614677565b61231f565b005b3480156109e557600080fd5b50610a0060048036038101906109fb91906146c0565b6123b5565b604051610a0d9190613c4e565b60405180910390f35b610a306004803603810190610a2b919061457c565b612449565b604051610a3d9190613e5e565b60405180910390f35b348015610a5257600080fd5b50610a6d6004803603810190610a6891906140d3565b612676565b005b348015610a7b57600080fd5b50610a8461276e565b604051610a919190613e5e565b60405180910390f35b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610b0d5750610b0c82612774565b5b9050919050565b601160029054906101000a900460ff1681565b606060008054610b369061472f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b629061472f565b8015610baf5780601f10610b8457610100808354040283529160200191610baf565b820191906000526020600020905b815481529060010190602001808311610b9257829003601f168201915b5050505050905090565b6000610bc482612856565b610c03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfa906147d3565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610c49826114d1565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610cba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb190614865565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610cd96128c2565b73ffffffffffffffffffffffffffffffffffffffff161480610d085750610d0781610d026128c2565b6123b5565b5b610d47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3e906148f7565b60405180910390fd5b610d5183836128ca565b505050565b600d8181548110610d6657600080fd5b906000526020600020016000915090505481565b601160019054906101000a900460ff1681565b6000600880549050905090565b610dab610da56128c2565b82612983565b610dea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de190614989565b60405180910390fd5b610df5838383612a61565b505050565b601160009054906101000a900460ff1681565b6000610e1883611583565b8210610e59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5090614a1b565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60008083905060005b8351811015610f5b576000848281518110610ed957610ed8614a3b565b5b6020026020010151905080831015610f1b578281604051602001610efe929190614a8b565b604051602081830303815290604052805190602001209250610f47565b8083604051602001610f2e929190614a8b565b6040516020818303038152906040528051906020012092505b508080610f5390614ae6565b915050610ebb565b50601254811491505092915050565b610f726128c2565b73ffffffffffffffffffffffffffffffffffffffff16610f9061193e565b73ffffffffffffffffffffffffffffffffffffffff1614610fe6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fdd90614b7b565b60405180910390fd5b6000479050610ff361193e565b73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611038573d6000803e3d6000fd5b5050565b6110446128c2565b73ffffffffffffffffffffffffffffffffffffffff1661106261193e565b73ffffffffffffffffffffffffffffffffffffffff16146110b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110af90614b7b565b60405180910390fd5b8060128190555050565b60006110cc6128c2565b73ffffffffffffffffffffffffffffffffffffffff166110ea61193e565b73ffffffffffffffffffffffffffffffffffffffff1614611140576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113790614b7b565b60405180910390fd5b611148612cbd565b6001905090565b61116a83838360405180602001604052806000815250611c19565b505050565b6060600061117c83611583565b905060008167ffffffffffffffff81111561119a57611199613f07565b5b6040519080825280602002602001820160405280156111c85781602001602082028036833780820191505090505b50905060005b82811015611212576111e08582610e0d565b8282815181106111f3576111f2614a3b565b5b602002602001018181525050808061120a90614ae6565b9150506111ce565b508092505050919050565b6112256114ba565b15611265576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125c90614be7565b60405180910390fd5b6002600b5414156112ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a290614c53565b60405180910390fd5b6002600b81905550601160029054906101000a900460ff16611302576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f990614cbf565b60405180910390fd5b600d60018154811061131757611316614a3b565b5b9060005260206000200154341015611364576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135b90614d2b565b60405180910390fd5b600061137861137233612d5f565b83610eb2565b905080156113915761138b336002612d8f565b506113cc565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c390614d97565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc600d6001815481106113fb576113fa614a3b565b5b9060005260206000200154346114119190614db7565b9081150290604051600060405180830381858888f1935050505015801561143c573d6000803e3d6000fd5b50506001600b8190555050565b6000611453610d8d565b8210611494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148b90614e5d565b60405180910390fd5b600882815481106114a8576114a7614a3b565b5b90600052602060002001549050919050565b6000600a60009054906101000a900460ff16905090565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561157a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157190614eef565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156115f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115eb90614f81565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6116436128c2565b73ffffffffffffffffffffffffffffffffffffffff1661166161193e565b73ffffffffffffffffffffffffffffffffffffffff16146116b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ae90614b7b565b60405180910390fd5b6116c16000612e4c565b565b60006116cd6128c2565b73ffffffffffffffffffffffffffffffffffffffff166116eb61193e565b73ffffffffffffffffffffffffffffffffffffffff1614611741576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173890614b7b565b60405180910390fd5b61174b8383612d8f565b905092915050565b600061175d6128c2565b73ffffffffffffffffffffffffffffffffffffffff1661177b61193e565b73ffffffffffffffffffffffffffffffffffffffff16146117d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c890614b7b565b60405180910390fd5b81601360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b60006118256128c2565b73ffffffffffffffffffffffffffffffffffffffff1661184361193e565b73ffffffffffffffffffffffffffffffffffffffff1614611899576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189090614b7b565b60405180910390fd5b6118a1612f12565b6001905090565b600e81815481106118b857600080fd5b906000526020600020016000915090505481565b60006118d782612856565b611916576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190d90614fed565b60405180910390fd5b600c600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546119779061472f565b80601f01602080910402602001604051908101604052809291908181526020018280546119a39061472f565b80156119f05780601f106119c5576101008083540402835291602001916119f0565b820191906000526020600020905b8154815290600101906020018083116119d357829003601f168201915b5050505050905090565b611a026128c2565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611a70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6790615059565b60405180910390fd5b8060056000611a7d6128c2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611b2a6128c2565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611b6f9190613c4e565b60405180910390a35050565b6000611b856128c2565b73ffffffffffffffffffffffffffffffffffffffff16611ba361193e565b73ffffffffffffffffffffffffffffffffffffffff1614611bf9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf090614b7b565b60405180910390fd5b81600d9080519060200190611c0f929190613aaa565b5060019050919050565b611c2a611c246128c2565b83612983565b611c69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6090614989565b60405180910390fd5b611c7584848484612fb5565b50505050565b6060611c8682612856565b611cc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cbc90614fed565b60405180910390fd5b611ccd613011565b611cd6836130a3565b604051602001611ce79291906150b5565b6040516020818303038152906040529050919050565b60108054611d0a9061472f565b80601f0160208091040260200160405190810160405280929190818152602001828054611d369061472f565b8015611d835780601f10611d5857610100808354040283529160200191611d83565b820191906000526020600020905b815481529060010190602001808311611d6657829003601f168201915b505050505081565b6000611d956114ba565b15611dd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dcc90614be7565b60405180910390fd5b6002600b541415611e1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1290614c53565b60405180910390fd5b6002600b81905550601160029054906101000a900460ff1615611e73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6a90615125565b60405180910390fd5b601160019054906101000a900460ff16611ec2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb990615191565b60405180910390fd5b600e8260ff1681548110611ed957611ed8614a3b565b5b9060005260206000200154601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401611f419291906151b1565b60206040518083038186803b158015611f5957600080fd5b505afa158015611f6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9191906151ef565b1015611fd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc990615268565b60405180910390fd5b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3361201961193e565b61206160646120536008600e8a60ff168154811061203a57612039614a3b565b5b906000526020600020015461320490919063ffffffff16565b61321a90919063ffffffff16565b6040518463ffffffff1660e01b815260040161207f93929190615288565b602060405180830381600087803b15801561209957600080fd5b505af11580156120ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d191906152d4565b50601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33612159606461214b605c600e8960ff168154811061213257612131614a3b565b5b906000526020600020015461320490919063ffffffff16565b61321a90919063ffffffff16565b6040518363ffffffff1660e01b8152600401612176929190615301565b602060405180830381600087803b15801561219057600080fd5b505af11580156121a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c891906152d4565b5060006121d53384612d8f565b9050809150506001600b81905550919050565b6121f06128c2565b73ffffffffffffffffffffffffffffffffffffffff1661220e61193e565b73ffffffffffffffffffffffffffffffffffffffff1614612264576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225b90614b7b565b60405180910390fd5b80601160026101000a81548160ff02191690831515021790555050565b600061228b6128c2565b73ffffffffffffffffffffffffffffffffffffffff166122a961193e565b73ffffffffffffffffffffffffffffffffffffffff16146122ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f690614b7b565b60405180910390fd5b81600e9080519060200190612315929190613aaa565b5060019050919050565b6123276128c2565b73ffffffffffffffffffffffffffffffffffffffff1661234561193e565b73ffffffffffffffffffffffffffffffffffffffff161461239b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239290614b7b565b60405180910390fd5b80601090805190602001906123b1929190613af7565b5050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006124536114ba565b15612493576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248a90614be7565b60405180910390fd5b6002600b5414156124d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124d090614c53565b60405180910390fd5b6002600b81905550601160029054906101000a900460ff1615612531576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252890615125565b60405180910390fd5b601160009054906101000a900460ff16612580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161257790615191565b60405180910390fd5b600d8260ff168154811061259757612596614a3b565b5b90600052602060002001543410156125e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125db90614d2b565b60405180910390fd5b60006125f03384612d8f565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc600d8560ff168154811061262357612622614a3b565b5b9060005260206000200154346126399190614db7565b9081150290604051600060405180830381858888f19350505050158015612664573d6000803e3d6000fd5b50809150506001600b81905550919050565b61267e6128c2565b73ffffffffffffffffffffffffffffffffffffffff1661269c61193e565b73ffffffffffffffffffffffffffffffffffffffff16146126f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126e990614b7b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612762576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127599061539c565b60405180910390fd5b61276b81612e4c565b50565b600f5481565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061283f57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061284f575061284e82613230565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661293d836114d1565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061298e82612856565b6129cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129c49061542e565b60405180910390fd5b60006129d8836114d1565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612a4757508373ffffffffffffffffffffffffffffffffffffffff16612a2f84610bb9565b73ffffffffffffffffffffffffffffffffffffffff16145b80612a585750612a5781856123b5565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612a81826114d1565b73ffffffffffffffffffffffffffffffffffffffff1614612ad7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ace906154c0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612b47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b3e90615552565b60405180910390fd5b612b5283838361329a565b612b5d6000826128ca565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612bad9190614db7565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612c049190615572565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b612cc56114ba565b612d04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cfb90615614565b60405180910390fd5b6000600a60006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612d486128c2565b604051612d559190613dc8565b60405180910390a1565b600081604051602001612d72919061567c565b604051602081830303815290604052805190602001209050919050565b6000612da283612d9d610d8d565b6133ae565b81600c6000612daf610d8d565b815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508160ff166001612de3610d8d565b612ded9190614db7565b8473ffffffffffffffffffffffffffffffffffffffff167faabcc1eb354f11e651c87f835e7de6ac847d514718ed76fad480d55d2632992260405160405180910390a46001612e3a610d8d565b612e449190614db7565b905092915050565b6000600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612f1a6114ba565b15612f5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f5190614be7565b60405180910390fd5b6001600a60006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612f9e6128c2565b604051612fab9190613dc8565b60405180910390a1565b612fc0848484612a61565b612fcc848484846133cc565b61300b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161300290615709565b60405180910390fd5b50505050565b6060601080546130209061472f565b80601f016020809104026020016040519081016040528092919081815260200182805461304c9061472f565b80156130995780601f1061306e57610100808354040283529160200191613099565b820191906000526020600020905b81548152906001019060200180831161307c57829003601f168201915b5050505050905090565b606060008214156130eb576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506131ff565b600082905060005b6000821461311d57808061310690614ae6565b915050600a826131169190615758565b91506130f3565b60008167ffffffffffffffff81111561313957613138613f07565b5b6040519080825280601f01601f19166020018201604052801561316b5781602001600182028036833780820191505090505b5090505b600085146131f8576001826131849190614db7565b9150600a856131939190615789565b603061319f9190615572565b60f81b8183815181106131b5576131b4614a3b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856131f19190615758565b945061316f565b8093505050505b919050565b6000818361321291906157ba565b905092915050565b600081836132289190615758565b905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6132a5838383613563565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156132e8576132e381613568565b613327565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146133265761332583826135b1565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561336a576133658161371e565b6133a9565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146133a8576133a782826137ef565b5b5b505050565b6133c882826040518060200160405280600081525061386e565b5050565b60006133ed8473ffffffffffffffffffffffffffffffffffffffff166138c9565b15613556578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026134166128c2565b8786866040518563ffffffff1660e01b81526004016134389493929190615869565b602060405180830381600087803b15801561345257600080fd5b505af192505050801561348357506040513d601f19601f8201168201806040525081019061348091906158ca565b60015b613506573d80600081146134b3576040519150601f19603f3d011682016040523d82523d6000602084013e6134b8565b606091505b506000815114156134fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134f590615709565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061355b565b600190505b949350505050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016135be84611583565b6135c89190614db7565b90506000600760008481526020019081526020016000205490508181146136ad576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506137329190614db7565b905060006009600084815260200190815260200160002054905060006008838154811061376257613761614a3b565b5b90600052602060002001549050806008838154811061378457613783614a3b565b5b9060005260206000200181905550816009600083815260200190815260200160002081905550600960008581526020019081526020016000206000905560088054806137d3576137d26158f7565b5b6001900381819060005260206000200160009055905550505050565b60006137fa83611583565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b61387883836138dc565b61388560008484846133cc565b6138c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138bb90615709565b60405180910390fd5b505050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561394c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161394390615972565b60405180910390fd5b61395581612856565b15613995576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161398c906159de565b60405180910390fd5b6139a16000838361329a565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546139f19190615572565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b828054828255906000526020600020908101928215613ae6579160200282015b82811115613ae5578251825591602001919060010190613aca565b5b509050613af39190613b7d565b5090565b828054613b039061472f565b90600052602060002090601f016020900481019282613b255760008555613b6c565b82601f10613b3e57805160ff1916838001178555613b6c565b82800160010185558215613b6c579182015b82811115613b6b578251825591602001919060010190613b50565b5b509050613b799190613b7d565b5090565b5b80821115613b96576000816000905550600101613b7e565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613be381613bae565b8114613bee57600080fd5b50565b600081359050613c0081613bda565b92915050565b600060208284031215613c1c57613c1b613ba4565b5b6000613c2a84828501613bf1565b91505092915050565b60008115159050919050565b613c4881613c33565b82525050565b6000602082019050613c636000830184613c3f565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613ca3578082015181840152602081019050613c88565b83811115613cb2576000848401525b50505050565b6000601f19601f8301169050919050565b6000613cd482613c69565b613cde8185613c74565b9350613cee818560208601613c85565b613cf781613cb8565b840191505092915050565b60006020820190508181036000830152613d1c8184613cc9565b905092915050565b6000819050919050565b613d3781613d24565b8114613d4257600080fd5b50565b600081359050613d5481613d2e565b92915050565b600060208284031215613d7057613d6f613ba4565b5b6000613d7e84828501613d45565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613db282613d87565b9050919050565b613dc281613da7565b82525050565b6000602082019050613ddd6000830184613db9565b92915050565b613dec81613da7565b8114613df757600080fd5b50565b600081359050613e0981613de3565b92915050565b60008060408385031215613e2657613e25613ba4565b5b6000613e3485828601613dfa565b9250506020613e4585828601613d45565b9150509250929050565b613e5881613d24565b82525050565b6000602082019050613e736000830184613e4f565b92915050565b600080600060608486031215613e9257613e91613ba4565b5b6000613ea086828701613dfa565b9350506020613eb186828701613dfa565b9250506040613ec286828701613d45565b9150509250925092565b6000819050919050565b613edf81613ecc565b8114613eea57600080fd5b50565b600081359050613efc81613ed6565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613f3f82613cb8565b810181811067ffffffffffffffff82111715613f5e57613f5d613f07565b5b80604052505050565b6000613f71613b9a565b9050613f7d8282613f36565b919050565b600067ffffffffffffffff821115613f9d57613f9c613f07565b5b602082029050602081019050919050565b600080fd5b6000613fc6613fc184613f82565b613f67565b90508083825260208201905060208402830185811115613fe957613fe8613fae565b5b835b818110156140125780613ffe8882613eed565b845260208401935050602081019050613feb565b5050509392505050565b600082601f83011261403157614030613f02565b5b8135614041848260208601613fb3565b91505092915050565b6000806040838503121561406157614060613ba4565b5b600061406f85828601613eed565b925050602083013567ffffffffffffffff8111156140905761408f613ba9565b5b61409c8582860161401c565b9150509250929050565b6000602082840312156140bc576140bb613ba4565b5b60006140ca84828501613eed565b91505092915050565b6000602082840312156140e9576140e8613ba4565b5b60006140f784828501613dfa565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61413581613d24565b82525050565b6000614147838361412c565b60208301905092915050565b6000602082019050919050565b600061416b82614100565b614175818561410b565b93506141808361411c565b8060005b838110156141b1578151614198888261413b565b97506141a383614153565b925050600181019050614184565b5085935050505092915050565b600060208201905081810360008301526141d88184614160565b905092915050565b6000602082840312156141f6576141f5613ba4565b5b600082013567ffffffffffffffff81111561421457614213613ba9565b5b6142208482850161401c565b91505092915050565b600060ff82169050919050565b61423f81614229565b811461424a57600080fd5b50565b60008135905061425c81614236565b92915050565b6000806040838503121561427957614278613ba4565b5b600061428785828601613dfa565b92505060206142988582860161424d565b9150509250929050565b6142ab81614229565b82525050565b60006020820190506142c660008301846142a2565b92915050565b6142d581613c33565b81146142e057600080fd5b50565b6000813590506142f2816142cc565b92915050565b6000806040838503121561430f5761430e613ba4565b5b600061431d85828601613dfa565b925050602061432e858286016142e3565b9150509250929050565b600067ffffffffffffffff82111561435357614352613f07565b5b602082029050602081019050919050565b600061437761437284614338565b613f67565b9050808382526020820190506020840283018581111561439a57614399613fae565b5b835b818110156143c357806143af8882613d45565b84526020840193505060208101905061439c565b5050509392505050565b600082601f8301126143e2576143e1613f02565b5b81356143f2848260208601614364565b91505092915050565b60006020828403121561441157614410613ba4565b5b600082013567ffffffffffffffff81111561442f5761442e613ba9565b5b61443b848285016143cd565b91505092915050565b600080fd5b600067ffffffffffffffff82111561446457614463613f07565b5b61446d82613cb8565b9050602081019050919050565b82818337600083830152505050565b600061449c61449784614449565b613f67565b9050828152602081018484840111156144b8576144b7614444565b5b6144c384828561447a565b509392505050565b600082601f8301126144e0576144df613f02565b5b81356144f0848260208601614489565b91505092915050565b6000806000806080858703121561451357614512613ba4565b5b600061452187828801613dfa565b945050602061453287828801613dfa565b935050604061454387828801613d45565b925050606085013567ffffffffffffffff81111561456457614563613ba9565b5b614570878288016144cb565b91505092959194509250565b60006020828403121561459257614591613ba4565b5b60006145a08482850161424d565b91505092915050565b6000602082840312156145bf576145be613ba4565b5b60006145cd848285016142e3565b91505092915050565b600067ffffffffffffffff8211156145f1576145f0613f07565b5b6145fa82613cb8565b9050602081019050919050565b600061461a614615846145d6565b613f67565b90508281526020810184848401111561463657614635614444565b5b61464184828561447a565b509392505050565b600082601f83011261465e5761465d613f02565b5b813561466e848260208601614607565b91505092915050565b60006020828403121561468d5761468c613ba4565b5b600082013567ffffffffffffffff8111156146ab576146aa613ba9565b5b6146b784828501614649565b91505092915050565b600080604083850312156146d7576146d6613ba4565b5b60006146e585828601613dfa565b92505060206146f685828601613dfa565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061474757607f821691505b6020821081141561475b5761475a614700565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b60006147bd602c83613c74565b91506147c882614761565b604082019050919050565b600060208201905081810360008301526147ec816147b0565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b600061484f602183613c74565b915061485a826147f3565b604082019050919050565b6000602082019050818103600083015261487e81614842565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b60006148e1603883613c74565b91506148ec82614885565b604082019050919050565b60006020820190508181036000830152614910816148d4565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6000614973603183613c74565b915061497e82614917565b604082019050919050565b600060208201905081810360008301526149a281614966565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000614a05602b83613c74565b9150614a10826149a9565b604082019050919050565b60006020820190508181036000830152614a34816149f8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b614a85614a8082613ecc565b614a6a565b82525050565b6000614a978285614a74565b602082019150614aa78284614a74565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614af182613d24565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614b2457614b23614ab7565b5b600182019050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614b65602083613c74565b9150614b7082614b2f565b602082019050919050565b60006020820190508181036000830152614b9481614b58565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000614bd1601083613c74565b9150614bdc82614b9b565b602082019050919050565b60006020820190508181036000830152614c0081614bc4565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614c3d601f83613c74565b9150614c4882614c07565b602082019050919050565b60006020820190508181036000830152614c6c81614c30565b9050919050565b7f57686974656c697374206973206e6f7420616374697665000000000000000000600082015250565b6000614ca9601783613c74565b9150614cb482614c73565b602082019050919050565b60006020820190508181036000830152614cd881614c9c565b9050919050565b7f4e6f7420656e6f7567687420424e420000000000000000000000000000000000600082015250565b6000614d15600f83613c74565b9150614d2082614cdf565b602082019050919050565b60006020820190508181036000830152614d4481614d08565b9050919050565b7f4e6f742077686974656c69737465640000000000000000000000000000000000600082015250565b6000614d81600f83613c74565b9150614d8c82614d4b565b602082019050919050565b60006020820190508181036000830152614db081614d74565b9050919050565b6000614dc282613d24565b9150614dcd83613d24565b925082821015614de057614ddf614ab7565b5b828203905092915050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000614e47602c83613c74565b9150614e5282614deb565b604082019050919050565b60006020820190508181036000830152614e7681614e3a565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b6000614ed9602983613c74565b9150614ee482614e7d565b604082019050919050565b60006020820190508181036000830152614f0881614ecc565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000614f6b602a83613c74565b9150614f7682614f0f565b604082019050919050565b60006020820190508181036000830152614f9a81614f5e565b9050919050565b7f546f6b656e20646f6573206e6f74206578697374000000000000000000000000600082015250565b6000614fd7601483613c74565b9150614fe282614fa1565b602082019050919050565b6000602082019050818103600083015261500681614fca565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000615043601983613c74565b915061504e8261500d565b602082019050919050565b6000602082019050818103600083015261507281615036565b9050919050565b600081905092915050565b600061508f82613c69565b6150998185615079565b93506150a9818560208601613c85565b80840191505092915050565b60006150c18285615084565b91506150cd8284615084565b91508190509392505050565b7f57686974656c6973742069732061637469766500000000000000000000000000600082015250565b600061510f601383613c74565b915061511a826150d9565b602082019050919050565b6000602082019050818103600083015261513e81615102565b9050919050565b7f53616c657320696e20424e4220617265206e6f74207065726d69747465640000600082015250565b600061517b601e83613c74565b915061518682615145565b602082019050919050565b600060208201905081810360008301526151aa8161516e565b9050919050565b60006040820190506151c66000830185613db9565b6151d36020830184613db9565b9392505050565b6000815190506151e981613d2e565b92915050565b60006020828403121561520557615204613ba4565b5b6000615213848285016151da565b91505092915050565b7f4e6f7420656e6f7567687420616c6c6f77616e63650000000000000000000000600082015250565b6000615252601583613c74565b915061525d8261521c565b602082019050919050565b6000602082019050818103600083015261528181615245565b9050919050565b600060608201905061529d6000830186613db9565b6152aa6020830185613db9565b6152b76040830184613e4f565b949350505050565b6000815190506152ce816142cc565b92915050565b6000602082840312156152ea576152e9613ba4565b5b60006152f8848285016152bf565b91505092915050565b60006040820190506153166000830185613db9565b6153236020830184613e4f565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000615386602683613c74565b91506153918261532a565b604082019050919050565b600060208201905081810360008301526153b581615379565b9050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000615418602c83613c74565b9150615423826153bc565b604082019050919050565b600060208201905081810360008301526154478161540b565b9050919050565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b60006154aa602983613c74565b91506154b58261544e565b604082019050919050565b600060208201905081810360008301526154d98161549d565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061553c602483613c74565b9150615547826154e0565b604082019050919050565b6000602082019050818103600083015261556b8161552f565b9050919050565b600061557d82613d24565b915061558883613d24565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156155bd576155bc614ab7565b5b828201905092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b60006155fe601483613c74565b9150615609826155c8565b602082019050919050565b6000602082019050818103600083015261562d816155f1565b9050919050565b60008160601b9050919050565b600061564c82615634565b9050919050565b600061565e82615641565b9050919050565b61567661567182613da7565b615653565b82525050565b60006156888284615665565b60148201915081905092915050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006156f3603283613c74565b91506156fe82615697565b604082019050919050565b60006020820190508181036000830152615722816156e6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061576382613d24565b915061576e83613d24565b92508261577e5761577d615729565b5b828204905092915050565b600061579482613d24565b915061579f83613d24565b9250826157af576157ae615729565b5b828206905092915050565b60006157c582613d24565b91506157d083613d24565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561580957615808614ab7565b5b828202905092915050565b600081519050919050565b600082825260208201905092915050565b600061583b82615814565b615845818561581f565b9350615855818560208601613c85565b61585e81613cb8565b840191505092915050565b600060808201905061587e6000830187613db9565b61588b6020830186613db9565b6158986040830185613e4f565b81810360608301526158aa8184615830565b905095945050505050565b6000815190506158c481613bda565b92915050565b6000602082840312156158e0576158df613ba4565b5b60006158ee848285016158b5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061595c602083613c74565b915061596782615926565b602082019050919050565b6000602082019050818103600083015261598b8161594f565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006159c8601c83613c74565b91506159d382615992565b602082019050919050565b600060208201905081810360008301526159f7816159bb565b905091905056fea2646970667358221220d8071325517a9cb00e60fdf9d10245078f39a82157b5b7978fa180b7401cf47064736f6c63430008090033687474703a2f2f6c6f63616c686f73743a383038302f6170692f6d6574616474612f",
  "deployedBytecode": "0x60806040526004361061025c5760003560e01c806370a0823111610144578063b88d4fde116100b6578063e0d5f5db1161007a578063e0d5f5db14610973578063e40e97a7146109b0578063e985e9c5146109d9578063f09542b314610a16578063f2fde38b14610a46578063fc1a1c3614610a6f5761025c565b8063b88d4fde1461087c578063c87b56dd146108a5578063ca847633146108e2578063d124d28f1461090d578063d9583b9f1461094a5761025c565b806387ddb7b71161010857806387ddb7b7146107465780638cba90b0146107835780638da5cb5b146107c057806395d89b41146107eb578063a22cb46514610816578063a69a6e821461083f5761025c565b806370a082311461064d578063715018a61461068a57806379d72794146106a15780637b125a1d146106de5780638456cb591461071b5761025c565b80632f745c59116101dd57806342842e0e116101a157806342842e0e14610526578063438b63001461054f57806344d843811461058c5780634f6ccce7146105a85780635c975abb146105e55780636352211e146106105761025c565b80632f745c5914610441578063329ea90d1461047e5780633ccfd60b146104bb5780633d59cd60146104d25780633f4ba83a146104fb5761025c565b8063120f91d511610224578063120f91d51461035a578063158d9ac31461039757806318160ddd146103c257806323b872dd146103ed57806329c7f1fa146104165761025c565b806301ffc9a71461026157806302ce58131461029e57806306fdde03146102c9578063081812fc146102f4578063095ea7b314610331575b600080fd5b34801561026d57600080fd5b5061028860048036038101906102839190613c06565b610a9a565b6040516102959190613c4e565b60405180910390f35b3480156102aa57600080fd5b506102b3610b14565b6040516102c09190613c4e565b60405180910390f35b3480156102d557600080fd5b506102de610b27565b6040516102eb9190613d02565b60405180910390f35b34801561030057600080fd5b5061031b60048036038101906103169190613d5a565b610bb9565b6040516103289190613dc8565b60405180910390f35b34801561033d57600080fd5b5061035860048036038101906103539190613e0f565b610c3e565b005b34801561036657600080fd5b50610381600480360381019061037c9190613d5a565b610d56565b60405161038e9190613e5e565b60405180910390f35b3480156103a357600080fd5b506103ac610d7a565b6040516103b99190613c4e565b60405180910390f35b3480156103ce57600080fd5b506103d7610d8d565b6040516103e49190613e5e565b60405180910390f35b3480156103f957600080fd5b50610414600480360381019061040f9190613e79565b610d9a565b005b34801561042257600080fd5b5061042b610dfa565b6040516104389190613c4e565b60405180910390f35b34801561044d57600080fd5b5061046860048036038101906104639190613e0f565b610e0d565b6040516104759190613e5e565b60405180910390f35b34801561048a57600080fd5b506104a560048036038101906104a0919061404a565b610eb2565b6040516104b29190613c4e565b60405180910390f35b3480156104c757600080fd5b506104d0610f6a565b005b3480156104de57600080fd5b506104f960048036038101906104f491906140a6565b61103c565b005b34801561050757600080fd5b506105106110c2565b60405161051d9190613c4e565b60405180910390f35b34801561053257600080fd5b5061054d60048036038101906105489190613e79565b61114f565b005b34801561055b57600080fd5b50610576600480360381019061057191906140d3565b61116f565b60405161058391906141be565b60405180910390f35b6105a660048036038101906105a191906141e0565b61121d565b005b3480156105b457600080fd5b506105cf60048036038101906105ca9190613d5a565b611449565b6040516105dc9190613e5e565b60405180910390f35b3480156105f157600080fd5b506105fa6114ba565b6040516106079190613c4e565b60405180910390f35b34801561061c57600080fd5b5061063760048036038101906106329190613d5a565b6114d1565b6040516106449190613dc8565b60405180910390f35b34801561065957600080fd5b50610674600480360381019061066f91906140d3565b611583565b6040516106819190613e5e565b60405180910390f35b34801561069657600080fd5b5061069f61163b565b005b3480156106ad57600080fd5b506106c860048036038101906106c39190614262565b6116c3565b6040516106d59190613e5e565b60405180910390f35b3480156106ea57600080fd5b50610705600480360381019061070091906140d3565b611753565b6040516107129190613c4e565b60405180910390f35b34801561072757600080fd5b5061073061181b565b60405161073d9190613c4e565b60405180910390f35b34801561075257600080fd5b5061076d60048036038101906107689190613d5a565b6118a8565b60405161077a9190613e5e565b60405180910390f35b34801561078f57600080fd5b506107aa60048036038101906107a59190613d5a565b6118cc565b6040516107b791906142b1565b60405180910390f35b3480156107cc57600080fd5b506107d561193e565b6040516107e29190613dc8565b60405180910390f35b3480156107f757600080fd5b50610800611968565b60405161080d9190613d02565b60405180910390f35b34801561082257600080fd5b5061083d600480360381019061083891906142f8565b6119fa565b005b34801561084b57600080fd5b50610866600480360381019061086191906143fb565b611b7b565b6040516108739190613c4e565b60405180910390f35b34801561088857600080fd5b506108a3600480360381019061089e91906144f9565b611c19565b005b3480156108b157600080fd5b506108cc60048036038101906108c79190613d5a565b611c7b565b6040516108d99190613d02565b60405180910390f35b3480156108ee57600080fd5b506108f7611cfd565b6040516109049190613d02565b60405180910390f35b34801561091957600080fd5b50610934600480360381019061092f919061457c565b611d8b565b6040516109419190613e5e565b60405180910390f35b34801561095657600080fd5b50610971600480360381019061096c91906145a9565b6121e8565b005b34801561097f57600080fd5b5061099a600480360381019061099591906143fb565b612281565b6040516109a79190613c4e565b60405180910390f35b3480156109bc57600080fd5b506109d760048036038101906109d29190614677565b61231f565b005b3480156109e557600080fd5b50610a0060048036038101906109fb91906146c0565b6123b5565b604051610a0d9190613c4e565b60405180910390f35b610a306004803603810190610a2b919061457c565b612449565b604051610a3d9190613e5e565b60405180910390f35b348015610a5257600080fd5b50610a6d6004803603810190610a6891906140d3565b612676565b005b348015610a7b57600080fd5b50610a8461276e565b604051610a919190613e5e565b60405180910390f35b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610b0d5750610b0c82612774565b5b9050919050565b601160029054906101000a900460ff1681565b606060008054610b369061472f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b629061472f565b8015610baf5780601f10610b8457610100808354040283529160200191610baf565b820191906000526020600020905b815481529060010190602001808311610b9257829003601f168201915b5050505050905090565b6000610bc482612856565b610c03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfa906147d3565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610c49826114d1565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610cba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb190614865565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610cd96128c2565b73ffffffffffffffffffffffffffffffffffffffff161480610d085750610d0781610d026128c2565b6123b5565b5b610d47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3e906148f7565b60405180910390fd5b610d5183836128ca565b505050565b600d8181548110610d6657600080fd5b906000526020600020016000915090505481565b601160019054906101000a900460ff1681565b6000600880549050905090565b610dab610da56128c2565b82612983565b610dea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de190614989565b60405180910390fd5b610df5838383612a61565b505050565b601160009054906101000a900460ff1681565b6000610e1883611583565b8210610e59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5090614a1b565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60008083905060005b8351811015610f5b576000848281518110610ed957610ed8614a3b565b5b6020026020010151905080831015610f1b578281604051602001610efe929190614a8b565b604051602081830303815290604052805190602001209250610f47565b8083604051602001610f2e929190614a8b565b6040516020818303038152906040528051906020012092505b508080610f5390614ae6565b915050610ebb565b50601254811491505092915050565b610f726128c2565b73ffffffffffffffffffffffffffffffffffffffff16610f9061193e565b73ffffffffffffffffffffffffffffffffffffffff1614610fe6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fdd90614b7b565b60405180910390fd5b6000479050610ff361193e565b73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611038573d6000803e3d6000fd5b5050565b6110446128c2565b73ffffffffffffffffffffffffffffffffffffffff1661106261193e565b73ffffffffffffffffffffffffffffffffffffffff16146110b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110af90614b7b565b60405180910390fd5b8060128190555050565b60006110cc6128c2565b73ffffffffffffffffffffffffffffffffffffffff166110ea61193e565b73ffffffffffffffffffffffffffffffffffffffff1614611140576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113790614b7b565b60405180910390fd5b611148612cbd565b6001905090565b61116a83838360405180602001604052806000815250611c19565b505050565b6060600061117c83611583565b905060008167ffffffffffffffff81111561119a57611199613f07565b5b6040519080825280602002602001820160405280156111c85781602001602082028036833780820191505090505b50905060005b82811015611212576111e08582610e0d565b8282815181106111f3576111f2614a3b565b5b602002602001018181525050808061120a90614ae6565b9150506111ce565b508092505050919050565b6112256114ba565b15611265576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125c90614be7565b60405180910390fd5b6002600b5414156112ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a290614c53565b60405180910390fd5b6002600b81905550601160029054906101000a900460ff16611302576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f990614cbf565b60405180910390fd5b600d60018154811061131757611316614a3b565b5b9060005260206000200154341015611364576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135b90614d2b565b60405180910390fd5b600061137861137233612d5f565b83610eb2565b905080156113915761138b336002612d8f565b506113cc565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c390614d97565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc600d6001815481106113fb576113fa614a3b565b5b9060005260206000200154346114119190614db7565b9081150290604051600060405180830381858888f1935050505015801561143c573d6000803e3d6000fd5b50506001600b8190555050565b6000611453610d8d565b8210611494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148b90614e5d565b60405180910390fd5b600882815481106114a8576114a7614a3b565b5b90600052602060002001549050919050565b6000600a60009054906101000a900460ff16905090565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561157a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157190614eef565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156115f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115eb90614f81565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6116436128c2565b73ffffffffffffffffffffffffffffffffffffffff1661166161193e565b73ffffffffffffffffffffffffffffffffffffffff16146116b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ae90614b7b565b60405180910390fd5b6116c16000612e4c565b565b60006116cd6128c2565b73ffffffffffffffffffffffffffffffffffffffff166116eb61193e565b73ffffffffffffffffffffffffffffffffffffffff1614611741576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173890614b7b565b60405180910390fd5b61174b8383612d8f565b905092915050565b600061175d6128c2565b73ffffffffffffffffffffffffffffffffffffffff1661177b61193e565b73ffffffffffffffffffffffffffffffffffffffff16146117d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c890614b7b565b60405180910390fd5b81601360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b60006118256128c2565b73ffffffffffffffffffffffffffffffffffffffff1661184361193e565b73ffffffffffffffffffffffffffffffffffffffff1614611899576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189090614b7b565b60405180910390fd5b6118a1612f12565b6001905090565b600e81815481106118b857600080fd5b906000526020600020016000915090505481565b60006118d782612856565b611916576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190d90614fed565b60405180910390fd5b600c600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546119779061472f565b80601f01602080910402602001604051908101604052809291908181526020018280546119a39061472f565b80156119f05780601f106119c5576101008083540402835291602001916119f0565b820191906000526020600020905b8154815290600101906020018083116119d357829003601f168201915b5050505050905090565b611a026128c2565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611a70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6790615059565b60405180910390fd5b8060056000611a7d6128c2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611b2a6128c2565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611b6f9190613c4e565b60405180910390a35050565b6000611b856128c2565b73ffffffffffffffffffffffffffffffffffffffff16611ba361193e565b73ffffffffffffffffffffffffffffffffffffffff1614611bf9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf090614b7b565b60405180910390fd5b81600d9080519060200190611c0f929190613aaa565b5060019050919050565b611c2a611c246128c2565b83612983565b611c69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6090614989565b60405180910390fd5b611c7584848484612fb5565b50505050565b6060611c8682612856565b611cc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cbc90614fed565b60405180910390fd5b611ccd613011565b611cd6836130a3565b604051602001611ce79291906150b5565b6040516020818303038152906040529050919050565b60108054611d0a9061472f565b80601f0160208091040260200160405190810160405280929190818152602001828054611d369061472f565b8015611d835780601f10611d5857610100808354040283529160200191611d83565b820191906000526020600020905b815481529060010190602001808311611d6657829003601f168201915b505050505081565b6000611d956114ba565b15611dd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dcc90614be7565b60405180910390fd5b6002600b541415611e1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1290614c53565b60405180910390fd5b6002600b81905550601160029054906101000a900460ff1615611e73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6a90615125565b60405180910390fd5b601160019054906101000a900460ff16611ec2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb990615191565b60405180910390fd5b600e8260ff1681548110611ed957611ed8614a3b565b5b9060005260206000200154601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401611f419291906151b1565b60206040518083038186803b158015611f5957600080fd5b505afa158015611f6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9191906151ef565b1015611fd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc990615268565b60405180910390fd5b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3361201961193e565b61206160646120536008600e8a60ff168154811061203a57612039614a3b565b5b906000526020600020015461320490919063ffffffff16565b61321a90919063ffffffff16565b6040518463ffffffff1660e01b815260040161207f93929190615288565b602060405180830381600087803b15801561209957600080fd5b505af11580156120ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d191906152d4565b50601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33612159606461214b605c600e8960ff168154811061213257612131614a3b565b5b906000526020600020015461320490919063ffffffff16565b61321a90919063ffffffff16565b6040518363ffffffff1660e01b8152600401612176929190615301565b602060405180830381600087803b15801561219057600080fd5b505af11580156121a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c891906152d4565b5060006121d53384612d8f565b9050809150506001600b81905550919050565b6121f06128c2565b73ffffffffffffffffffffffffffffffffffffffff1661220e61193e565b73ffffffffffffffffffffffffffffffffffffffff1614612264576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225b90614b7b565b60405180910390fd5b80601160026101000a81548160ff02191690831515021790555050565b600061228b6128c2565b73ffffffffffffffffffffffffffffffffffffffff166122a961193e565b73ffffffffffffffffffffffffffffffffffffffff16146122ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f690614b7b565b60405180910390fd5b81600e9080519060200190612315929190613aaa565b5060019050919050565b6123276128c2565b73ffffffffffffffffffffffffffffffffffffffff1661234561193e565b73ffffffffffffffffffffffffffffffffffffffff161461239b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239290614b7b565b60405180910390fd5b80601090805190602001906123b1929190613af7565b5050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006124536114ba565b15612493576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248a90614be7565b60405180910390fd5b6002600b5414156124d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124d090614c53565b60405180910390fd5b6002600b81905550601160029054906101000a900460ff1615612531576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252890615125565b60405180910390fd5b601160009054906101000a900460ff16612580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161257790615191565b60405180910390fd5b600d8260ff168154811061259757612596614a3b565b5b90600052602060002001543410156125e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125db90614d2b565b60405180910390fd5b60006125f03384612d8f565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc600d8560ff168154811061262357612622614a3b565b5b9060005260206000200154346126399190614db7565b9081150290604051600060405180830381858888f19350505050158015612664573d6000803e3d6000fd5b50809150506001600b81905550919050565b61267e6128c2565b73ffffffffffffffffffffffffffffffffffffffff1661269c61193e565b73ffffffffffffffffffffffffffffffffffffffff16146126f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126e990614b7b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612762576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127599061539c565b60405180910390fd5b61276b81612e4c565b50565b600f5481565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061283f57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061284f575061284e82613230565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661293d836114d1565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061298e82612856565b6129cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129c49061542e565b60405180910390fd5b60006129d8836114d1565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612a4757508373ffffffffffffffffffffffffffffffffffffffff16612a2f84610bb9565b73ffffffffffffffffffffffffffffffffffffffff16145b80612a585750612a5781856123b5565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612a81826114d1565b73ffffffffffffffffffffffffffffffffffffffff1614612ad7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ace906154c0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612b47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b3e90615552565b60405180910390fd5b612b5283838361329a565b612b5d6000826128ca565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612bad9190614db7565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612c049190615572565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b612cc56114ba565b612d04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cfb90615614565b60405180910390fd5b6000600a60006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612d486128c2565b604051612d559190613dc8565b60405180910390a1565b600081604051602001612d72919061567c565b604051602081830303815290604052805190602001209050919050565b6000612da283612d9d610d8d565b6133ae565b81600c6000612daf610d8d565b815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508160ff166001612de3610d8d565b612ded9190614db7565b8473ffffffffffffffffffffffffffffffffffffffff167faabcc1eb354f11e651c87f835e7de6ac847d514718ed76fad480d55d2632992260405160405180910390a46001612e3a610d8d565b612e449190614db7565b905092915050565b6000600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612f1a6114ba565b15612f5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f5190614be7565b60405180910390fd5b6001600a60006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612f9e6128c2565b604051612fab9190613dc8565b60405180910390a1565b612fc0848484612a61565b612fcc848484846133cc565b61300b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161300290615709565b60405180910390fd5b50505050565b6060601080546130209061472f565b80601f016020809104026020016040519081016040528092919081815260200182805461304c9061472f565b80156130995780601f1061306e57610100808354040283529160200191613099565b820191906000526020600020905b81548152906001019060200180831161307c57829003601f168201915b5050505050905090565b606060008214156130eb576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506131ff565b600082905060005b6000821461311d57808061310690614ae6565b915050600a826131169190615758565b91506130f3565b60008167ffffffffffffffff81111561313957613138613f07565b5b6040519080825280601f01601f19166020018201604052801561316b5781602001600182028036833780820191505090505b5090505b600085146131f8576001826131849190614db7565b9150600a856131939190615789565b603061319f9190615572565b60f81b8183815181106131b5576131b4614a3b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856131f19190615758565b945061316f565b8093505050505b919050565b6000818361321291906157ba565b905092915050565b600081836132289190615758565b905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6132a5838383613563565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156132e8576132e381613568565b613327565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146133265761332583826135b1565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561336a576133658161371e565b6133a9565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146133a8576133a782826137ef565b5b5b505050565b6133c882826040518060200160405280600081525061386e565b5050565b60006133ed8473ffffffffffffffffffffffffffffffffffffffff166138c9565b15613556578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026134166128c2565b8786866040518563ffffffff1660e01b81526004016134389493929190615869565b602060405180830381600087803b15801561345257600080fd5b505af192505050801561348357506040513d601f19601f8201168201806040525081019061348091906158ca565b60015b613506573d80600081146134b3576040519150601f19603f3d011682016040523d82523d6000602084013e6134b8565b606091505b506000815114156134fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134f590615709565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061355b565b600190505b949350505050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016135be84611583565b6135c89190614db7565b90506000600760008481526020019081526020016000205490508181146136ad576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506137329190614db7565b905060006009600084815260200190815260200160002054905060006008838154811061376257613761614a3b565b5b90600052602060002001549050806008838154811061378457613783614a3b565b5b9060005260206000200181905550816009600083815260200190815260200160002081905550600960008581526020019081526020016000206000905560088054806137d3576137d26158f7565b5b6001900381819060005260206000200160009055905550505050565b60006137fa83611583565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b61387883836138dc565b61388560008484846133cc565b6138c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138bb90615709565b60405180910390fd5b505050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561394c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161394390615972565b60405180910390fd5b61395581612856565b15613995576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161398c906159de565b60405180910390fd5b6139a16000838361329a565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546139f19190615572565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b828054828255906000526020600020908101928215613ae6579160200282015b82811115613ae5578251825591602001919060010190613aca565b5b509050613af39190613b7d565b5090565b828054613b039061472f565b90600052602060002090601f016020900481019282613b255760008555613b6c565b82601f10613b3e57805160ff1916838001178555613b6c565b82800160010185558215613b6c579182015b82811115613b6b578251825591602001919060010190613b50565b5b509050613b799190613b7d565b5090565b5b80821115613b96576000816000905550600101613b7e565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613be381613bae565b8114613bee57600080fd5b50565b600081359050613c0081613bda565b92915050565b600060208284031215613c1c57613c1b613ba4565b5b6000613c2a84828501613bf1565b91505092915050565b60008115159050919050565b613c4881613c33565b82525050565b6000602082019050613c636000830184613c3f565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613ca3578082015181840152602081019050613c88565b83811115613cb2576000848401525b50505050565b6000601f19601f8301169050919050565b6000613cd482613c69565b613cde8185613c74565b9350613cee818560208601613c85565b613cf781613cb8565b840191505092915050565b60006020820190508181036000830152613d1c8184613cc9565b905092915050565b6000819050919050565b613d3781613d24565b8114613d4257600080fd5b50565b600081359050613d5481613d2e565b92915050565b600060208284031215613d7057613d6f613ba4565b5b6000613d7e84828501613d45565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613db282613d87565b9050919050565b613dc281613da7565b82525050565b6000602082019050613ddd6000830184613db9565b92915050565b613dec81613da7565b8114613df757600080fd5b50565b600081359050613e0981613de3565b92915050565b60008060408385031215613e2657613e25613ba4565b5b6000613e3485828601613dfa565b9250506020613e4585828601613d45565b9150509250929050565b613e5881613d24565b82525050565b6000602082019050613e736000830184613e4f565b92915050565b600080600060608486031215613e9257613e91613ba4565b5b6000613ea086828701613dfa565b9350506020613eb186828701613dfa565b9250506040613ec286828701613d45565b9150509250925092565b6000819050919050565b613edf81613ecc565b8114613eea57600080fd5b50565b600081359050613efc81613ed6565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613f3f82613cb8565b810181811067ffffffffffffffff82111715613f5e57613f5d613f07565b5b80604052505050565b6000613f71613b9a565b9050613f7d8282613f36565b919050565b600067ffffffffffffffff821115613f9d57613f9c613f07565b5b602082029050602081019050919050565b600080fd5b6000613fc6613fc184613f82565b613f67565b90508083825260208201905060208402830185811115613fe957613fe8613fae565b5b835b818110156140125780613ffe8882613eed565b845260208401935050602081019050613feb565b5050509392505050565b600082601f83011261403157614030613f02565b5b8135614041848260208601613fb3565b91505092915050565b6000806040838503121561406157614060613ba4565b5b600061406f85828601613eed565b925050602083013567ffffffffffffffff8111156140905761408f613ba9565b5b61409c8582860161401c565b9150509250929050565b6000602082840312156140bc576140bb613ba4565b5b60006140ca84828501613eed565b91505092915050565b6000602082840312156140e9576140e8613ba4565b5b60006140f784828501613dfa565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61413581613d24565b82525050565b6000614147838361412c565b60208301905092915050565b6000602082019050919050565b600061416b82614100565b614175818561410b565b93506141808361411c565b8060005b838110156141b1578151614198888261413b565b97506141a383614153565b925050600181019050614184565b5085935050505092915050565b600060208201905081810360008301526141d88184614160565b905092915050565b6000602082840312156141f6576141f5613ba4565b5b600082013567ffffffffffffffff81111561421457614213613ba9565b5b6142208482850161401c565b91505092915050565b600060ff82169050919050565b61423f81614229565b811461424a57600080fd5b50565b60008135905061425c81614236565b92915050565b6000806040838503121561427957614278613ba4565b5b600061428785828601613dfa565b92505060206142988582860161424d565b9150509250929050565b6142ab81614229565b82525050565b60006020820190506142c660008301846142a2565b92915050565b6142d581613c33565b81146142e057600080fd5b50565b6000813590506142f2816142cc565b92915050565b6000806040838503121561430f5761430e613ba4565b5b600061431d85828601613dfa565b925050602061432e858286016142e3565b9150509250929050565b600067ffffffffffffffff82111561435357614352613f07565b5b602082029050602081019050919050565b600061437761437284614338565b613f67565b9050808382526020820190506020840283018581111561439a57614399613fae565b5b835b818110156143c357806143af8882613d45565b84526020840193505060208101905061439c565b5050509392505050565b600082601f8301126143e2576143e1613f02565b5b81356143f2848260208601614364565b91505092915050565b60006020828403121561441157614410613ba4565b5b600082013567ffffffffffffffff81111561442f5761442e613ba9565b5b61443b848285016143cd565b91505092915050565b600080fd5b600067ffffffffffffffff82111561446457614463613f07565b5b61446d82613cb8565b9050602081019050919050565b82818337600083830152505050565b600061449c61449784614449565b613f67565b9050828152602081018484840111156144b8576144b7614444565b5b6144c384828561447a565b509392505050565b600082601f8301126144e0576144df613f02565b5b81356144f0848260208601614489565b91505092915050565b6000806000806080858703121561451357614512613ba4565b5b600061452187828801613dfa565b945050602061453287828801613dfa565b935050604061454387828801613d45565b925050606085013567ffffffffffffffff81111561456457614563613ba9565b5b614570878288016144cb565b91505092959194509250565b60006020828403121561459257614591613ba4565b5b60006145a08482850161424d565b91505092915050565b6000602082840312156145bf576145be613ba4565b5b60006145cd848285016142e3565b91505092915050565b600067ffffffffffffffff8211156145f1576145f0613f07565b5b6145fa82613cb8565b9050602081019050919050565b600061461a614615846145d6565b613f67565b90508281526020810184848401111561463657614635614444565b5b61464184828561447a565b509392505050565b600082601f83011261465e5761465d613f02565b5b813561466e848260208601614607565b91505092915050565b60006020828403121561468d5761468c613ba4565b5b600082013567ffffffffffffffff8111156146ab576146aa613ba9565b5b6146b784828501614649565b91505092915050565b600080604083850312156146d7576146d6613ba4565b5b60006146e585828601613dfa565b92505060206146f685828601613dfa565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061474757607f821691505b6020821081141561475b5761475a614700565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b60006147bd602c83613c74565b91506147c882614761565b604082019050919050565b600060208201905081810360008301526147ec816147b0565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b600061484f602183613c74565b915061485a826147f3565b604082019050919050565b6000602082019050818103600083015261487e81614842565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b60006148e1603883613c74565b91506148ec82614885565b604082019050919050565b60006020820190508181036000830152614910816148d4565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6000614973603183613c74565b915061497e82614917565b604082019050919050565b600060208201905081810360008301526149a281614966565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000614a05602b83613c74565b9150614a10826149a9565b604082019050919050565b60006020820190508181036000830152614a34816149f8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b614a85614a8082613ecc565b614a6a565b82525050565b6000614a978285614a74565b602082019150614aa78284614a74565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614af182613d24565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614b2457614b23614ab7565b5b600182019050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614b65602083613c74565b9150614b7082614b2f565b602082019050919050565b60006020820190508181036000830152614b9481614b58565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000614bd1601083613c74565b9150614bdc82614b9b565b602082019050919050565b60006020820190508181036000830152614c0081614bc4565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614c3d601f83613c74565b9150614c4882614c07565b602082019050919050565b60006020820190508181036000830152614c6c81614c30565b9050919050565b7f57686974656c697374206973206e6f7420616374697665000000000000000000600082015250565b6000614ca9601783613c74565b9150614cb482614c73565b602082019050919050565b60006020820190508181036000830152614cd881614c9c565b9050919050565b7f4e6f7420656e6f7567687420424e420000000000000000000000000000000000600082015250565b6000614d15600f83613c74565b9150614d2082614cdf565b602082019050919050565b60006020820190508181036000830152614d4481614d08565b9050919050565b7f4e6f742077686974656c69737465640000000000000000000000000000000000600082015250565b6000614d81600f83613c74565b9150614d8c82614d4b565b602082019050919050565b60006020820190508181036000830152614db081614d74565b9050919050565b6000614dc282613d24565b9150614dcd83613d24565b925082821015614de057614ddf614ab7565b5b828203905092915050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000614e47602c83613c74565b9150614e5282614deb565b604082019050919050565b60006020820190508181036000830152614e7681614e3a565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b6000614ed9602983613c74565b9150614ee482614e7d565b604082019050919050565b60006020820190508181036000830152614f0881614ecc565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000614f6b602a83613c74565b9150614f7682614f0f565b604082019050919050565b60006020820190508181036000830152614f9a81614f5e565b9050919050565b7f546f6b656e20646f6573206e6f74206578697374000000000000000000000000600082015250565b6000614fd7601483613c74565b9150614fe282614fa1565b602082019050919050565b6000602082019050818103600083015261500681614fca565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000615043601983613c74565b915061504e8261500d565b602082019050919050565b6000602082019050818103600083015261507281615036565b9050919050565b600081905092915050565b600061508f82613c69565b6150998185615079565b93506150a9818560208601613c85565b80840191505092915050565b60006150c18285615084565b91506150cd8284615084565b91508190509392505050565b7f57686974656c6973742069732061637469766500000000000000000000000000600082015250565b600061510f601383613c74565b915061511a826150d9565b602082019050919050565b6000602082019050818103600083015261513e81615102565b9050919050565b7f53616c657320696e20424e4220617265206e6f74207065726d69747465640000600082015250565b600061517b601e83613c74565b915061518682615145565b602082019050919050565b600060208201905081810360008301526151aa8161516e565b9050919050565b60006040820190506151c66000830185613db9565b6151d36020830184613db9565b9392505050565b6000815190506151e981613d2e565b92915050565b60006020828403121561520557615204613ba4565b5b6000615213848285016151da565b91505092915050565b7f4e6f7420656e6f7567687420616c6c6f77616e63650000000000000000000000600082015250565b6000615252601583613c74565b915061525d8261521c565b602082019050919050565b6000602082019050818103600083015261528181615245565b9050919050565b600060608201905061529d6000830186613db9565b6152aa6020830185613db9565b6152b76040830184613e4f565b949350505050565b6000815190506152ce816142cc565b92915050565b6000602082840312156152ea576152e9613ba4565b5b60006152f8848285016152bf565b91505092915050565b60006040820190506153166000830185613db9565b6153236020830184613e4f565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000615386602683613c74565b91506153918261532a565b604082019050919050565b600060208201905081810360008301526153b581615379565b9050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000615418602c83613c74565b9150615423826153bc565b604082019050919050565b600060208201905081810360008301526154478161540b565b9050919050565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b60006154aa602983613c74565b91506154b58261544e565b604082019050919050565b600060208201905081810360008301526154d98161549d565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061553c602483613c74565b9150615547826154e0565b604082019050919050565b6000602082019050818103600083015261556b8161552f565b9050919050565b600061557d82613d24565b915061558883613d24565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156155bd576155bc614ab7565b5b828201905092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b60006155fe601483613c74565b9150615609826155c8565b602082019050919050565b6000602082019050818103600083015261562d816155f1565b9050919050565b60008160601b9050919050565b600061564c82615634565b9050919050565b600061565e82615641565b9050919050565b61567661567182613da7565b615653565b82525050565b60006156888284615665565b60148201915081905092915050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006156f3603283613c74565b91506156fe82615697565b604082019050919050565b60006020820190508181036000830152615722816156e6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061576382613d24565b915061576e83613d24565b92508261577e5761577d615729565b5b828204905092915050565b600061579482613d24565b915061579f83613d24565b9250826157af576157ae615729565b5b828206905092915050565b60006157c582613d24565b91506157d083613d24565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561580957615808614ab7565b5b828202905092915050565b600081519050919050565b600082825260208201905092915050565b600061583b82615814565b615845818561581f565b9350615855818560208601613c85565b61585e81613cb8565b840191505092915050565b600060808201905061587e6000830187613db9565b61588b6020830186613db9565b6158986040830185613e4f565b81810360608301526158aa8184615830565b905095945050505050565b6000815190506158c481613bda565b92915050565b6000602082840312156158e0576158df613ba4565b5b60006158ee848285016158b5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061595c602083613c74565b915061596782615926565b602082019050919050565b6000602082019050818103600083015261598b8161594f565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006159c8601c83613c74565b91506159d382615992565b602082019050919050565b600060208201905081810360008301526159f7816159bb565b905091905056fea2646970667358221220d8071325517a9cb00e60fdf9d10245078f39a82157b5b7978fa180b7401cf47064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5281,
        "contract": "contracts/Burger.sol:Burger",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 5283,
        "contract": "contracts/Burger.sol:Burger",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 5287,
        "contract": "contracts/Burger.sol:Burger",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5291,
        "contract": "contracts/Burger.sol:Burger",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5295,
        "contract": "contracts/Burger.sol:Burger",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5301,
        "contract": "contracts/Burger.sol:Burger",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6220,
        "contract": "contracts/Burger.sol:Burger",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6224,
        "contract": "contracts/Burger.sol:Burger",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6227,
        "contract": "contracts/Burger.sol:Burger",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6231,
        "contract": "contracts/Burger.sol:Burger",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4104,
        "contract": "contracts/Burger.sol:Burger",
        "label": "_paused",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 3990,
        "contract": "contracts/Burger.sol:Burger",
        "label": "_owner",
        "offset": 1,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 4189,
        "contract": "contracts/Burger.sol:Burger",
        "label": "_status",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2784,
        "contract": "contracts/Burger.sol:Burger",
        "label": "boxTypeById",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint8)"
      },
      {
        "astId": 2795,
        "contract": "contracts/Burger.sol:Burger",
        "label": "boxPriceBNB",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2806,
        "contract": "contracts/Burger.sol:Burger",
        "label": "boxPriceBURG",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2811,
        "contract": "contracts/Burger.sol:Burger",
        "label": "whitelistPrice",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2814,
        "contract": "contracts/Burger.sol:Burger",
        "label": "strBaseTokenURI",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
        "astId": 2817,
        "contract": "contracts/Burger.sol:Burger",
        "label": "saleBNBEnabled",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 2820,
        "contract": "contracts/Burger.sol:Burger",
        "label": "saleBURGEnabled",
        "offset": 1,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 2823,
        "contract": "contracts/Burger.sol:Burger",
        "label": "whitelistActive",
        "offset": 2,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 2826,
        "contract": "contracts/Burger.sol:Burger",
        "label": "root",
        "offset": 0,
        "slot": "18",
        "type": "t_bytes32"
      },
      {
        "astId": 2828,
        "contract": "contracts/Burger.sol:Burger",
        "label": "BURG",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint8)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}