{
<<<<<<< HEAD
  "address": "0xD104C0BC2aBDd5Bd019e6e3235F5A1F28172AcDF",
=======
  "address": "0x36fEe1d672220cFaE256f75079e86D80Bc859b82",
>>>>>>> 27470beba0b425e4312be47dd5af57d3eb42ba9d
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "_boxType",
          "type": "uint8"
        }
      ],
      "name": "MintNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "boxPriceBNB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "boxPriceBURG",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBaseTokenURI",
          "type": "string"
        }
      ],
      "name": "changeBaseTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        }
      ],
      "name": "changeRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newState",
          "type": "bool"
        }
      ],
      "name": "changeWhitelistState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getboxTypeById",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "boxType",
          "type": "uint8"
        }
      ],
      "name": "mintNormal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "boxType",
          "type": "uint8"
        }
      ],
      "name": "mintNormalBURG",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "boxType",
          "type": "uint8"
        }
      ],
      "name": "mintOwner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "mintWhitelist",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleBNBEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleBURGEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "setBURGAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strBaseTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_newBoxPricesBNB",
          "type": "uint256[]"
        }
      ],
      "name": "updateBoxPricesBNB",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_newBoxPricesBURG",
          "type": "uint256[]"
        }
      ],
      "name": "updateBoxPricesBURG",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
<<<<<<< HEAD
  "transactionHash": "0x2ca31e82926a479e0fb9c34a26846fef5c6d8cebdb6ab4d85760967d9795f400",
  "receipt": {
    "to": null,
    "from": "0xc09eAC15f9Ba6462e8E4612af7C431E1cfe08b87",
    "contractAddress": "0xD104C0BC2aBDd5Bd019e6e3235F5A1F28172AcDF",
    "transactionIndex": 23,
    "gasUsed": "4729413",
    "logsBloom": "0x
    "blockHash": "0x5c7c086ad47062197f82a00da4cf8a18d99799bae7e73e1a46de40452b3fa7b1",
    "transactionHash": "0x2ca31e82926a479e0fb9c34a26846fef5c6d8cebdb6ab4d85760967d9795f400",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 9644061,
        "transactionHash": "0x2ca31e82926a479e0fb9c34a26846fef5c6d8cebdb6ab4d85760967d9795f400",
        "address": "0xD104C0BC2aBDd5Bd019e6e3235F5A1F28172AcDF",
=======
  "transactionHash": "0x31aa10570323a459fca30894c5249a9a98632b568e7707c19820f727995d21be",
  "receipt": {
    "to": null,
    "from": "0x2C260699603E31593fB66E6D6Cd0De5D8148c7c5",
    "contractAddress": "0x36fEe1d672220cFaE256f75079e86D80Bc859b82",
    "transactionIndex": 26,
    "gasUsed": "5380974",
    "logsBloom": "0x00000000000000000000000000000000000000000000000020800000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000010000000000000000000000000000000000000000000000000000000000040000000000000000000000000020040000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x2a06fbc42fd8b17fb2731c11e863d993426a699fa8b4a536695a7dbf3ce0e4b7",
    "transactionHash": "0x31aa10570323a459fca30894c5249a9a98632b568e7707c19820f727995d21be",
    "logs": [
      {
        "transactionIndex": 26,
        "blockNumber": 9637074,
        "transactionHash": "0x31aa10570323a459fca30894c5249a9a98632b568e7707c19820f727995d21be",
        "address": "0x36fEe1d672220cFaE256f75079e86D80Bc859b82",
>>>>>>> 27470beba0b425e4312be47dd5af57d3eb42ba9d
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c09eac15f9ba6462e8e4612af7c431e1cfe08b87"
        ],
        "data": "0x",
<<<<<<< HEAD
        "logIndex": 51,
        "blockHash": "0x5c7c086ad47062197f82a00da4cf8a18d99799bae7e73e1a46de40452b3fa7b1"
      }
    ],
    "blockNumber": 9644061,
    "cumulativeGasUsed": "6711624",
=======
        "logIndex": 35,
        "blockHash": "0x2a06fbc42fd8b17fb2731c11e863d993426a699fa8b4a536695a7dbf3ce0e4b7"
      }
    ],
    "blockNumber": 9637074,
    "cumulativeGasUsed": "7407580",
>>>>>>> 27470beba0b425e4312be47dd5af57d3eb42ba9d
    "status": 1,
    "byzantium": true
  },
  "args": [],
<<<<<<< HEAD
  "solcInputHash": "9b8c48850ccd79b6f8c4e6cefcb5d36d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"_boxType\",\"type\":\"uint8\"}],\"name\":\"MintNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boxPriceBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseTokenURI\",\"type\":\"string\"}],\"name\":\"changeBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"changeRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"changeWhitelistState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getboxTypeById\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"boxType\",\"type\":\"uint8\"}],\"name\":\"mintNormal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"boxType\",\"type\":\"uint8\"}],\"name\":\"mintOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"mintWhitelist\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strBaseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newBoxPricesBNB\",\"type\":\"uint256[]\"}],\"name\":\"updateBoxPricesBNB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Burger.sol\":\"Burger\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Burger.sol\":{\"content\":\"/*\\r\\nCRYPTOBURGERS\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract Burger is ERC721Enumerable, Pausable, Ownable, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(uint256 => uint8) private boxTypeById;\\r\\n\\r\\n    uint256[] public boxPriceBNB = [1e16, 2 * 1e16, 3 * 1e16];\\r\\n    uint256 public whitelistPrice = 2 * 1e16;\\r\\n    // string public strBaseTokenURI =\\r\\n    //     \\\"https://backend.cryptoburgers.io/metadata/\\\";\\r\\n    string public strBaseTokenURI = \\r\\n            \\\"http://localhost:8080/api/metadta/\\\";\\r\\n\\r\\n    // Change to true in the mainnet deploy.\\r\\n    bool public whitelistActive = false;\\r\\n    bytes32 private root =\\r\\n        0xa2fc709bf2f4b9cb44b8a9114485d12d4877bb1beedd81f62f4f85a8056480ee;\\r\\n\\r\\n    event MintNFT(\\r\\n        address indexed _to,\\r\\n        uint256 indexed _id,\\r\\n        uint8 indexed _boxType\\r\\n    );\\r\\n\\r\\n    constructor() ERC721(\\\"Burger\\\", \\\"BURGER\\\") {\\r\\n        // Uncomment if we want deploy paused\\r\\n        // _pause();\\r\\n    }\\r\\n\\r\\n    function mintWhitelist(bytes32 leaf, bytes32[] memory proof)\\r\\n        external\\r\\n        payable\\r\\n        whenNotPaused\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(whitelistActive, \\\"Whitelist is not active\\\");\\r\\n        require(msg.value >= boxPriceBNB[1], \\\"Not enought BNB\\\");\\r\\n\\r\\n        bool isWhitelisted = verifyWhitelist(leaf, proof);\\r\\n\\r\\n        if (isWhitelisted) {\\r\\n            mint(msg.sender, 2);\\r\\n        } else {\\r\\n            revert(\\\"Not whitelisted\\\");\\r\\n        }\\r\\n\\r\\n        payable(msg.sender).transfer(msg.value - boxPriceBNB[1]);\\r\\n    }\\r\\n\\r\\n    function mintOwner(address _to, uint8 boxType)\\r\\n        external\\r\\n        onlyOwner\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return mint(_to, boxType);\\r\\n    }\\r\\n\\r\\n    function mintNormal(uint8 boxType)\\r\\n        external\\r\\n        payable\\r\\n        whenNotPaused\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(!whitelistActive, \\\"Whitelist is active\\\");\\r\\n        require(msg.value >= boxPriceBNB[boxType], \\\"Not enough BNB\\\");\\r\\n        uint256 idMinted = mint(msg.sender, boxType);\\r\\n        payable(msg.sender).transfer(msg.value - boxPriceBNB[boxType]);\\r\\n        return idMinted;\\r\\n    }\\r\\n\\r\\n    function mint(address _to, uint8 boxType) internal returns (uint256) {\\r\\n        _safeMint(_to, totalSupply());\\r\\n        boxTypeById[totalSupply()] = boxType;\\r\\n\\r\\n        emit MintNFT(_to, totalSupply() - 1, boxType);\\r\\n\\r\\n        return totalSupply() - 1;\\r\\n    }\\r\\n\\r\\n    function walletOfOwner(address _owner)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256 tokenCount = balanceOf(_owner);\\r\\n        uint256[] memory tokensId = new uint256[](tokenCount);\\r\\n        for (uint256 i = 0; i < tokenCount; i++) {\\r\\n            tokensId[i] = tokenOfOwnerByIndex(_owner, i);\\r\\n        }\\r\\n        return tokensId;\\r\\n    }\\r\\n\\r\\n    function withdraw() external onlyOwner {\\r\\n        uint256 balance = address(this).balance;\\r\\n        payable(owner()).transfer(balance);\\r\\n    }\\r\\n\\r\\n    function changeBaseTokenURI(string memory newBaseTokenURI)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        strBaseTokenURI = newBaseTokenURI;\\r\\n    }\\r\\n\\r\\n    function changeWhitelistState(bool newState) external onlyOwner {\\r\\n        whitelistActive = newState;\\r\\n    }\\r\\n\\r\\n    function changeRoot(bytes32 newRoot) external onlyOwner {\\r\\n        root = newRoot;\\r\\n    }\\r\\n\\r\\n    function verifyWhitelist(bytes32 leaf, bytes32[] memory proof)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        bytes32 computedHash = leaf;\\r\\n\\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            bytes32 proofElement = proof[i];\\r\\n\\r\\n            if (computedHash < proofElement) {\\r\\n                // Hash(current computed hash + current element of the proof)\\r\\n                computedHash = keccak256(\\r\\n                    abi.encodePacked(computedHash, proofElement)\\r\\n                );\\r\\n            } else {\\r\\n                // Hash(current element of the proof + current computed hash)\\r\\n                computedHash = keccak256(\\r\\n                    abi.encodePacked(proofElement, computedHash)\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Check if the computed hash (root) is equal to the provided root\\r\\n        return computedHash == root;\\r\\n    }\\r\\n\\r\\n    function updateBoxPricesBNB(uint256[] memory _newBoxPricesBNB)\\r\\n        external\\r\\n        onlyOwner\\r\\n        returns (bool)\\r\\n    {\\r\\n        boxPriceBNB = _newBoxPricesBNB;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return strBaseTokenURI;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 _tokenId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(_exists(_tokenId), \\\"Token does not exist\\\");\\r\\n        return string(abi.encodePacked(_baseURI(), Strings.toString(_tokenId)));\\r\\n    }\\r\\n\\r\\n    function getboxTypeById(uint256 _tokenId) external view returns (uint8) {\\r\\n        require(_exists(_tokenId), \\\"Token does not exist\\\");\\r\\n        return boxTypeById[_tokenId];\\r\\n    }\\r\\n\\r\\n    function pause() external onlyOwner returns (bool) {\\r\\n        _pause();\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function unpause() external onlyOwner returns (bool) {\\r\\n        _unpause();\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdfa34ddfc4ddbc77399e2c63e1cdf28dff883a03ee2422c1fe10d164a6efbe27\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040518060600160405280662386f26fc1000066ffffffffffffff16815260200166470de4df82000066ffffffffffffff168152602001666a94d74f43000066ffffffffffffff16815250600d90600362000061929190620002a6565b5066470de4df820000600e556040518060600160405280602281526020016200539260229139600f90805190602001906200009e92919062000303565b506000601060006101000a81548160ff0219169083151502179055507fa2fc709bf2f4b9cb44b8a9114485d12d4877bb1beedd81f62f4f85a8056480ee60001b601155348015620000ee57600080fd5b506040518060400160405280600681526020017f42757267657200000000000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f425552474552000000000000000000000000000000000000000000000000000081525081600090805190602001906200017392919062000303565b5080600190805190602001906200018c92919062000303565b5050506000600a60006101000a81548160ff021916908315150217905550620001ca620001be620001d860201b60201c565b620001e060201b60201c565b6001600b8190555062000418565b600033905090565b6000600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054828255906000526020600020908101928215620002f0579160200282015b82811115620002ef578251829066ffffffffffffff16905591602001919060010190620002c7565b5b509050620002ff919062000394565b5090565b8280546200031190620003e2565b90600052602060002090601f01602090048101928262000335576000855562000381565b82601f106200035057805160ff191683800117855562000381565b8280016001018555821562000381579182015b828111156200038057825182559160200191906001019062000363565b5b50905062000390919062000394565b5090565b5b80821115620003af57600081600090555060010162000395565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003fb57607f821691505b60208210811415620004125762000411620003b3565b5b50919050565b614f6a80620004286000396000f3fe60806040526004361061021a5760003560e01c806370a0823111610123578063b88d4fde116100ab578063e40e97a71161006f578063e40e97a714610824578063e985e9c51461084d578063f09542b31461088a578063f2fde38b146108ba578063fc1a1c36146108e35761021a565b8063b88d4fde1461074e578063c0fb5e8f14610777578063c87b56dd14610793578063ca847633146107d0578063d9583b9f146107fb5761021a565b80638cba90b0116100f25780638cba90b0146106555780638da5cb5b1461069257806395d89b41146106bd578063a22cb465146106e8578063a69a6e82146107115761021a565b806370a0823114610599578063715018a6146105d657806379d72794146105ed5780638456cb591461062a5761021a565b8063329ea90d116101a657806342842e0e1161017557806342842e0e1461048e578063438b6300146104b75780634f6ccce7146104f45780635c975abb146105315780636352211e1461055c5761021a565b8063329ea90d146103e65780633ccfd60b146104235780633d59cd601461043a5780633f4ba83a146104635761021a565b8063095ea7b3116101ed578063095ea7b3146102ef578063120f91d51461031857806318160ddd1461035557806323b872dd146103805780632f745c59146103a95761021a565b806301ffc9a71461021f57806302ce58131461025c57806306fdde0314610287578063081812fc146102b2575b600080fd5b34801561022b57600080fd5b50610246600480360381019061024191906133bb565b61090e565b6040516102539190613403565b60405180910390f35b34801561026857600080fd5b50610271610988565b60405161027e9190613403565b60405180910390f35b34801561029357600080fd5b5061029c61099b565b6040516102a991906134b7565b60405180910390f35b3480156102be57600080fd5b506102d960048036038101906102d4919061350f565b610a2d565b6040516102e6919061357d565b60405180910390f35b3480156102fb57600080fd5b50610316600480360381019061031191906135c4565b610ab2565b005b34801561032457600080fd5b5061033f600480360381019061033a919061350f565b610bca565b60405161034c9190613613565b60405180910390f35b34801561036157600080fd5b5061036a610bee565b6040516103779190613613565b60405180910390f35b34801561038c57600080fd5b506103a760048036038101906103a2919061362e565b610bfb565b005b3480156103b557600080fd5b506103d060048036038101906103cb91906135c4565b610c5b565b6040516103dd9190613613565b60405180910390f35b3480156103f257600080fd5b5061040d600480360381019061040891906137ff565b610d00565b60405161041a9190613403565b60405180910390f35b34801561042f57600080fd5b50610438610db8565b005b34801561044657600080fd5b50610461600480360381019061045c919061385b565b610e8a565b005b34801561046f57600080fd5b50610478610f10565b6040516104859190613403565b60405180910390f35b34801561049a57600080fd5b506104b560048036038101906104b0919061362e565b610f9d565b005b3480156104c357600080fd5b506104de60048036038101906104d99190613888565b610fbd565b6040516104eb9190613973565b60405180910390f35b34801561050057600080fd5b5061051b6004803603810190610516919061350f565b61106b565b6040516105289190613613565b60405180910390f35b34801561053d57600080fd5b506105466110dc565b6040516105539190613403565b60405180910390f35b34801561056857600080fd5b50610583600480360381019061057e919061350f565b6110f3565b604051610590919061357d565b60405180910390f35b3480156105a557600080fd5b506105c060048036038101906105bb9190613888565b6111a5565b6040516105cd9190613613565b60405180910390f35b3480156105e257600080fd5b506105eb61125d565b005b3480156105f957600080fd5b50610614600480360381019061060f91906139ce565b6112e5565b6040516106219190613613565b60405180910390f35b34801561063657600080fd5b5061063f611375565b60405161064c9190613403565b60405180910390f35b34801561066157600080fd5b5061067c6004803603810190610677919061350f565b611402565b6040516106899190613a1d565b60405180910390f35b34801561069e57600080fd5b506106a7611474565b6040516106b4919061357d565b60405180910390f35b3480156106c957600080fd5b506106d261149e565b6040516106df91906134b7565b60405180910390f35b3480156106f457600080fd5b5061070f600480360381019061070a9190613a64565b611530565b005b34801561071d57600080fd5b5061073860048036038101906107339190613b67565b6116b1565b6040516107459190613403565b60405180910390f35b34801561075a57600080fd5b5061077560048036038101906107709190613c65565b61174f565b005b610791600480360381019061078c91906137ff565b6117b1565b005b34801561079f57600080fd5b506107ba60048036038101906107b5919061350f565b6119d6565b6040516107c791906134b7565b60405180910390f35b3480156107dc57600080fd5b506107e5611a58565b6040516107f291906134b7565b60405180910390f35b34801561080757600080fd5b50610822600480360381019061081d9190613ce8565b611ae6565b005b34801561083057600080fd5b5061084b60048036038101906108469190613db6565b611b7f565b005b34801561085957600080fd5b50610874600480360381019061086f9190613dff565b611c15565b6040516108819190613403565b60405180910390f35b6108a4600480360381019061089f9190613e3f565b611ca9565b6040516108b19190613613565b60405180910390f35b3480156108c657600080fd5b506108e160048036038101906108dc9190613888565b611e87565b005b3480156108ef57600080fd5b506108f8611f7f565b6040516109059190613613565b60405180910390f35b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610981575061098082611f85565b5b9050919050565b601060009054906101000a900460ff1681565b6060600080546109aa90613e9b565b80601f01602080910402602001604051908101604052809291908181526020018280546109d690613e9b565b8015610a235780601f106109f857610100808354040283529160200191610a23565b820191906000526020600020905b815481529060010190602001808311610a0657829003601f168201915b5050505050905090565b6000610a3882612067565b610a77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6e90613f3f565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610abd826110f3565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2590613fd1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b4d6120d3565b73ffffffffffffffffffffffffffffffffffffffff161480610b7c5750610b7b81610b766120d3565b611c15565b5b610bbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb290614063565b60405180910390fd5b610bc583836120db565b505050565b600d8181548110610bda57600080fd5b906000526020600020016000915090505481565b6000600880549050905090565b610c0c610c066120d3565b82612194565b610c4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c42906140f5565b60405180910390fd5b610c56838383612272565b505050565b6000610c66836111a5565b8210610ca7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9e90614187565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60008083905060005b8351811015610da9576000848281518110610d2757610d266141a7565b5b6020026020010151905080831015610d69578281604051602001610d4c9291906141f7565b604051602081830303815290604052805190602001209250610d95565b8083604051602001610d7c9291906141f7565b6040516020818303038152906040528051906020012092505b508080610da190614252565b915050610d09565b50601154811491505092915050565b610dc06120d3565b73ffffffffffffffffffffffffffffffffffffffff16610dde611474565b73ffffffffffffffffffffffffffffffffffffffff1614610e34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2b906142e7565b60405180910390fd5b6000479050610e41611474565b73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610e86573d6000803e3d6000fd5b5050565b610e926120d3565b73ffffffffffffffffffffffffffffffffffffffff16610eb0611474565b73ffffffffffffffffffffffffffffffffffffffff1614610f06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efd906142e7565b60405180910390fd5b8060118190555050565b6000610f1a6120d3565b73ffffffffffffffffffffffffffffffffffffffff16610f38611474565b73ffffffffffffffffffffffffffffffffffffffff1614610f8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f85906142e7565b60405180910390fd5b610f966124ce565b6001905090565b610fb88383836040518060200160405280600081525061174f565b505050565b60606000610fca836111a5565b905060008167ffffffffffffffff811115610fe857610fe76136bc565b5b6040519080825280602002602001820160405280156110165781602001602082028036833780820191505090505b50905060005b828110156110605761102e8582610c5b565b828281518110611041576110406141a7565b5b602002602001018181525050808061105890614252565b91505061101c565b508092505050919050565b6000611075610bee565b82106110b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ad90614379565b60405180910390fd5b600882815481106110ca576110c96141a7565b5b90600052602060002001549050919050565b6000600a60009054906101000a900460ff16905090565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561119c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111939061440b565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611216576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120d9061449d565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6112656120d3565b73ffffffffffffffffffffffffffffffffffffffff16611283611474565b73ffffffffffffffffffffffffffffffffffffffff16146112d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d0906142e7565b60405180910390fd5b6112e36000612570565b565b60006112ef6120d3565b73ffffffffffffffffffffffffffffffffffffffff1661130d611474565b73ffffffffffffffffffffffffffffffffffffffff1614611363576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135a906142e7565b60405180910390fd5b61136d8383612636565b905092915050565b600061137f6120d3565b73ffffffffffffffffffffffffffffffffffffffff1661139d611474565b73ffffffffffffffffffffffffffffffffffffffff16146113f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ea906142e7565b60405180910390fd5b6113fb6126f3565b6001905090565b600061140d82612067565b61144c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144390614509565b60405180910390fd5b600c600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546114ad90613e9b565b80601f01602080910402602001604051908101604052809291908181526020018280546114d990613e9b565b80156115265780601f106114fb57610100808354040283529160200191611526565b820191906000526020600020905b81548152906001019060200180831161150957829003601f168201915b5050505050905090565b6115386120d3565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156115a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159d90614575565b60405180910390fd5b80600560006115b36120d3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166116606120d3565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516116a59190613403565b60405180910390a35050565b60006116bb6120d3565b73ffffffffffffffffffffffffffffffffffffffff166116d9611474565b73ffffffffffffffffffffffffffffffffffffffff161461172f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611726906142e7565b60405180910390fd5b81600d908051906020019061174592919061325f565b5060019050919050565b61176061175a6120d3565b83612194565b61179f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611796906140f5565b60405180910390fd5b6117ab84848484612796565b50505050565b6117b96110dc565b156117f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f0906145e1565b60405180910390fd5b6002600b54141561183f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118369061464d565b60405180910390fd5b6002600b81905550601060009054906101000a900460ff16611896576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188d906146b9565b60405180910390fd5b600d6001815481106118ab576118aa6141a7565b5b90600052602060002001543410156118f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ef90614725565b60405180910390fd5b60006119048383610d00565b9050801561191d57611917336002612636565b50611958565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194f90614791565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc600d600181548110611987576119866141a7565b5b90600052602060002001543461199d91906147b1565b9081150290604051600060405180830381858888f193505050501580156119c8573d6000803e3d6000fd5b50506001600b819055505050565b60606119e182612067565b611a20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1790614509565b60405180910390fd5b611a286127f2565b611a3183612884565b604051602001611a42929190614821565b6040516020818303038152906040529050919050565b600f8054611a6590613e9b565b80601f0160208091040260200160405190810160405280929190818152602001828054611a9190613e9b565b8015611ade5780601f10611ab357610100808354040283529160200191611ade565b820191906000526020600020905b815481529060010190602001808311611ac157829003601f168201915b505050505081565b611aee6120d3565b73ffffffffffffffffffffffffffffffffffffffff16611b0c611474565b73ffffffffffffffffffffffffffffffffffffffff1614611b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b59906142e7565b60405180910390fd5b80601060006101000a81548160ff02191690831515021790555050565b611b876120d3565b73ffffffffffffffffffffffffffffffffffffffff16611ba5611474565b73ffffffffffffffffffffffffffffffffffffffff1614611bfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf2906142e7565b60405180910390fd5b80600f9080519060200190611c119291906132ac565b5050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000611cb36110dc565b15611cf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cea906145e1565b60405180910390fd5b6002600b541415611d39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d309061464d565b60405180910390fd5b6002600b81905550601060009054906101000a900460ff1615611d91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8890614891565b60405180910390fd5b600d8260ff1681548110611da857611da76141a7565b5b9060005260206000200154341015611df5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dec906148fd565b60405180910390fd5b6000611e013384612636565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc600d8560ff1681548110611e3457611e336141a7565b5b906000526020600020015434611e4a91906147b1565b9081150290604051600060405180830381858888f19350505050158015611e75573d6000803e3d6000fd5b50809150506001600b81905550919050565b611e8f6120d3565b73ffffffffffffffffffffffffffffffffffffffff16611ead611474565b73ffffffffffffffffffffffffffffffffffffffff1614611f03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611efa906142e7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611f73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6a9061498f565b60405180910390fd5b611f7c81612570565b50565b600e5481565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061205057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612060575061205f826129e5565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661214e836110f3565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061219f82612067565b6121de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d590614a21565b60405180910390fd5b60006121e9836110f3565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061225857508373ffffffffffffffffffffffffffffffffffffffff1661224084610a2d565b73ffffffffffffffffffffffffffffffffffffffff16145b8061226957506122688185611c15565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612292826110f3565b73ffffffffffffffffffffffffffffffffffffffff16146122e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122df90614ab3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612358576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161234f90614b45565b60405180910390fd5b612363838383612a4f565b61236e6000826120db565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123be91906147b1565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546124159190614b65565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6124d66110dc565b612515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250c90614c07565b60405180910390fd5b6000600a60006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6125596120d3565b604051612566919061357d565b60405180910390a1565b6000600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600061264983612644610bee565b612b63565b81600c6000612656610bee565b815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508160ff16600161268a610bee565b61269491906147b1565b8473ffffffffffffffffffffffffffffffffffffffff167faabcc1eb354f11e651c87f835e7de6ac847d514718ed76fad480d55d2632992260405160405180910390a460016126e1610bee565b6126eb91906147b1565b905092915050565b6126fb6110dc565b1561273b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612732906145e1565b60405180910390fd5b6001600a60006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861277f6120d3565b60405161278c919061357d565b60405180910390a1565b6127a1848484612272565b6127ad84848484612b81565b6127ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127e390614c99565b60405180910390fd5b50505050565b6060600f805461280190613e9b565b80601f016020809104026020016040519081016040528092919081815260200182805461282d90613e9b565b801561287a5780601f1061284f5761010080835404028352916020019161287a565b820191906000526020600020905b81548152906001019060200180831161285d57829003601f168201915b5050505050905090565b606060008214156128cc576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506129e0565b600082905060005b600082146128fe5780806128e790614252565b915050600a826128f79190614ce8565b91506128d4565b60008167ffffffffffffffff81111561291a576129196136bc565b5b6040519080825280601f01601f19166020018201604052801561294c5781602001600182028036833780820191505090505b5090505b600085146129d95760018261296591906147b1565b9150600a856129749190614d19565b60306129809190614b65565b60f81b818381518110612996576129956141a7565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856129d29190614ce8565b9450612950565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b612a5a838383612d18565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612a9d57612a9881612d1d565b612adc565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612adb57612ada8382612d66565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612b1f57612b1a81612ed3565b612b5e565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612b5d57612b5c8282612fa4565b5b5b505050565b612b7d828260405180602001604052806000815250613023565b5050565b6000612ba28473ffffffffffffffffffffffffffffffffffffffff1661307e565b15612d0b578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612bcb6120d3565b8786866040518563ffffffff1660e01b8152600401612bed9493929190614d9f565b602060405180830381600087803b158015612c0757600080fd5b505af1925050508015612c3857506040513d601f19601f82011682018060405250810190612c359190614e00565b60015b612cbb573d8060008114612c68576040519150601f19603f3d011682016040523d82523d6000602084013e612c6d565b606091505b50600081511415612cb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612caa90614c99565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612d10565b600190505b949350505050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006001612d73846111a5565b612d7d91906147b1565b9050600060076000848152602001908152602001600020549050818114612e62576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b60006001600880549050612ee791906147b1565b9050600060096000848152602001908152602001600020549050600060088381548110612f1757612f166141a7565b5b906000526020600020015490508060088381548110612f3957612f386141a7565b5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480612f8857612f87614e2d565b5b6001900381819060005260206000200160009055905550505050565b6000612faf836111a5565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b61302d8383613091565b61303a6000848484612b81565b613079576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161307090614c99565b60405180910390fd5b505050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613101576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130f890614ea8565b60405180910390fd5b61310a81612067565b1561314a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161314190614f14565b60405180910390fd5b61315660008383612a4f565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546131a69190614b65565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b82805482825590600052602060002090810192821561329b579160200282015b8281111561329a57825182559160200191906001019061327f565b5b5090506132a89190613332565b5090565b8280546132b890613e9b565b90600052602060002090601f0160209004810192826132da5760008555613321565b82601f106132f357805160ff1916838001178555613321565b82800160010185558215613321579182015b82811115613320578251825591602001919060010190613305565b5b50905061332e9190613332565b5090565b5b8082111561334b576000816000905550600101613333565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61339881613363565b81146133a357600080fd5b50565b6000813590506133b58161338f565b92915050565b6000602082840312156133d1576133d0613359565b5b60006133df848285016133a6565b91505092915050565b60008115159050919050565b6133fd816133e8565b82525050565b600060208201905061341860008301846133f4565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561345857808201518184015260208101905061343d565b83811115613467576000848401525b50505050565b6000601f19601f8301169050919050565b60006134898261341e565b6134938185613429565b93506134a381856020860161343a565b6134ac8161346d565b840191505092915050565b600060208201905081810360008301526134d1818461347e565b905092915050565b6000819050919050565b6134ec816134d9565b81146134f757600080fd5b50565b600081359050613509816134e3565b92915050565b60006020828403121561352557613524613359565b5b6000613533848285016134fa565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006135678261353c565b9050919050565b6135778161355c565b82525050565b6000602082019050613592600083018461356e565b92915050565b6135a18161355c565b81146135ac57600080fd5b50565b6000813590506135be81613598565b92915050565b600080604083850312156135db576135da613359565b5b60006135e9858286016135af565b92505060206135fa858286016134fa565b9150509250929050565b61360d816134d9565b82525050565b60006020820190506136286000830184613604565b92915050565b60008060006060848603121561364757613646613359565b5b6000613655868287016135af565b9350506020613666868287016135af565b9250506040613677868287016134fa565b9150509250925092565b6000819050919050565b61369481613681565b811461369f57600080fd5b50565b6000813590506136b18161368b565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6136f48261346d565b810181811067ffffffffffffffff82111715613713576137126136bc565b5b80604052505050565b600061372661334f565b905061373282826136eb565b919050565b600067ffffffffffffffff821115613752576137516136bc565b5b602082029050602081019050919050565b600080fd5b600061377b61377684613737565b61371c565b9050808382526020820190506020840283018581111561379e5761379d613763565b5b835b818110156137c757806137b388826136a2565b8452602084019350506020810190506137a0565b5050509392505050565b600082601f8301126137e6576137e56136b7565b5b81356137f6848260208601613768565b91505092915050565b6000806040838503121561381657613815613359565b5b6000613824858286016136a2565b925050602083013567ffffffffffffffff8111156138455761384461335e565b5b613851858286016137d1565b9150509250929050565b60006020828403121561387157613870613359565b5b600061387f848285016136a2565b91505092915050565b60006020828403121561389e5761389d613359565b5b60006138ac848285016135af565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6138ea816134d9565b82525050565b60006138fc83836138e1565b60208301905092915050565b6000602082019050919050565b6000613920826138b5565b61392a81856138c0565b9350613935836138d1565b8060005b8381101561396657815161394d88826138f0565b975061395883613908565b925050600181019050613939565b5085935050505092915050565b6000602082019050818103600083015261398d8184613915565b905092915050565b600060ff82169050919050565b6139ab81613995565b81146139b657600080fd5b50565b6000813590506139c8816139a2565b92915050565b600080604083850312156139e5576139e4613359565b5b60006139f3858286016135af565b9250506020613a04858286016139b9565b9150509250929050565b613a1781613995565b82525050565b6000602082019050613a326000830184613a0e565b92915050565b613a41816133e8565b8114613a4c57600080fd5b50565b600081359050613a5e81613a38565b92915050565b60008060408385031215613a7b57613a7a613359565b5b6000613a89858286016135af565b9250506020613a9a85828601613a4f565b9150509250929050565b600067ffffffffffffffff821115613abf57613abe6136bc565b5b602082029050602081019050919050565b6000613ae3613ade84613aa4565b61371c565b90508083825260208201905060208402830185811115613b0657613b05613763565b5b835b81811015613b2f5780613b1b88826134fa565b845260208401935050602081019050613b08565b5050509392505050565b600082601f830112613b4e57613b4d6136b7565b5b8135613b5e848260208601613ad0565b91505092915050565b600060208284031215613b7d57613b7c613359565b5b600082013567ffffffffffffffff811115613b9b57613b9a61335e565b5b613ba784828501613b39565b91505092915050565b600080fd5b600067ffffffffffffffff821115613bd057613bcf6136bc565b5b613bd98261346d565b9050602081019050919050565b82818337600083830152505050565b6000613c08613c0384613bb5565b61371c565b905082815260208101848484011115613c2457613c23613bb0565b5b613c2f848285613be6565b509392505050565b600082601f830112613c4c57613c4b6136b7565b5b8135613c5c848260208601613bf5565b91505092915050565b60008060008060808587031215613c7f57613c7e613359565b5b6000613c8d878288016135af565b9450506020613c9e878288016135af565b9350506040613caf878288016134fa565b925050606085013567ffffffffffffffff811115613cd057613ccf61335e565b5b613cdc87828801613c37565b91505092959194509250565b600060208284031215613cfe57613cfd613359565b5b6000613d0c84828501613a4f565b91505092915050565b600067ffffffffffffffff821115613d3057613d2f6136bc565b5b613d398261346d565b9050602081019050919050565b6000613d59613d5484613d15565b61371c565b905082815260208101848484011115613d7557613d74613bb0565b5b613d80848285613be6565b509392505050565b600082601f830112613d9d57613d9c6136b7565b5b8135613dad848260208601613d46565b91505092915050565b600060208284031215613dcc57613dcb613359565b5b600082013567ffffffffffffffff811115613dea57613de961335e565b5b613df684828501613d88565b91505092915050565b60008060408385031215613e1657613e15613359565b5b6000613e24858286016135af565b9250506020613e35858286016135af565b9150509250929050565b600060208284031215613e5557613e54613359565b5b6000613e63848285016139b9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613eb357607f821691505b60208210811415613ec757613ec6613e6c565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000613f29602c83613429565b9150613f3482613ecd565b604082019050919050565b60006020820190508181036000830152613f5881613f1c565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613fbb602183613429565b9150613fc682613f5f565b604082019050919050565b60006020820190508181036000830152613fea81613fae565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b600061404d603883613429565b915061405882613ff1565b604082019050919050565b6000602082019050818103600083015261407c81614040565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b60006140df603183613429565b91506140ea82614083565b604082019050919050565b6000602082019050818103600083015261410e816140d2565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000614171602b83613429565b915061417c82614115565b604082019050919050565b600060208201905081810360008301526141a081614164565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b6141f16141ec82613681565b6141d6565b82525050565b600061420382856141e0565b60208201915061421382846141e0565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061425d826134d9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156142905761428f614223565b5b600182019050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006142d1602083613429565b91506142dc8261429b565b602082019050919050565b60006020820190508181036000830152614300816142c4565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000614363602c83613429565b915061436e82614307565b604082019050919050565b6000602082019050818103600083015261439281614356565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b60006143f5602983613429565b915061440082614399565b604082019050919050565b60006020820190508181036000830152614424816143e8565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000614487602a83613429565b91506144928261442b565b604082019050919050565b600060208201905081810360008301526144b68161447a565b9050919050565b7f546f6b656e20646f6573206e6f74206578697374000000000000000000000000600082015250565b60006144f3601483613429565b91506144fe826144bd565b602082019050919050565b60006020820190508181036000830152614522816144e6565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061455f601983613429565b915061456a82614529565b602082019050919050565b6000602082019050818103600083015261458e81614552565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006145cb601083613429565b91506145d682614595565b602082019050919050565b600060208201905081810360008301526145fa816145be565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614637601f83613429565b915061464282614601565b602082019050919050565b600060208201905081810360008301526146668161462a565b9050919050565b7f57686974656c697374206973206e6f7420616374697665000000000000000000600082015250565b60006146a3601783613429565b91506146ae8261466d565b602082019050919050565b600060208201905081810360008301526146d281614696565b9050919050565b7f4e6f7420656e6f7567687420424e420000000000000000000000000000000000600082015250565b600061470f600f83613429565b915061471a826146d9565b602082019050919050565b6000602082019050818103600083015261473e81614702565b9050919050565b7f4e6f742077686974656c69737465640000000000000000000000000000000000600082015250565b600061477b600f83613429565b915061478682614745565b602082019050919050565b600060208201905081810360008301526147aa8161476e565b9050919050565b60006147bc826134d9565b91506147c7836134d9565b9250828210156147da576147d9614223565b5b828203905092915050565b600081905092915050565b60006147fb8261341e565b61480581856147e5565b935061481581856020860161343a565b80840191505092915050565b600061482d82856147f0565b915061483982846147f0565b91508190509392505050565b7f57686974656c6973742069732061637469766500000000000000000000000000600082015250565b600061487b601383613429565b915061488682614845565b602082019050919050565b600060208201905081810360008301526148aa8161486e565b9050919050565b7f4e6f7420656e6f75676820424e42000000000000000000000000000000000000600082015250565b60006148e7600e83613429565b91506148f2826148b1565b602082019050919050565b60006020820190508181036000830152614916816148da565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614979602683613429565b91506149848261491d565b604082019050919050565b600060208201905081810360008301526149a88161496c565b9050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000614a0b602c83613429565b9150614a16826149af565b604082019050919050565b60006020820190508181036000830152614a3a816149fe565b9050919050565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b6000614a9d602983613429565b9150614aa882614a41565b604082019050919050565b60006020820190508181036000830152614acc81614a90565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000614b2f602483613429565b9150614b3a82614ad3565b604082019050919050565b60006020820190508181036000830152614b5e81614b22565b9050919050565b6000614b70826134d9565b9150614b7b836134d9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614bb057614baf614223565b5b828201905092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000614bf1601483613429565b9150614bfc82614bbb565b602082019050919050565b60006020820190508181036000830152614c2081614be4565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614c83603283613429565b9150614c8e82614c27565b604082019050919050565b60006020820190508181036000830152614cb281614c76565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614cf3826134d9565b9150614cfe836134d9565b925082614d0e57614d0d614cb9565b5b828204905092915050565b6000614d24826134d9565b9150614d2f836134d9565b925082614d3f57614d3e614cb9565b5b828206905092915050565b600081519050919050565b600082825260208201905092915050565b6000614d7182614d4a565b614d7b8185614d55565b9350614d8b81856020860161343a565b614d948161346d565b840191505092915050565b6000608082019050614db4600083018761356e565b614dc1602083018661356e565b614dce6040830185613604565b8181036060830152614de08184614d66565b905095945050505050565b600081519050614dfa8161338f565b92915050565b600060208284031215614e1657614e15613359565b5b6000614e2484828501614deb565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614e92602083613429565b9150614e9d82614e5c565b602082019050919050565b60006020820190508181036000830152614ec181614e85565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000614efe601c83613429565b9150614f0982614ec8565b602082019050919050565b60006020820190508181036000830152614f2d81614ef1565b905091905056fea2646970667358221220caa38221aadf74f7ea8d90ba2b182089b246c3c99119b56543bc44cca93c68a964736f6c63430008090033687474703a2f2f6c6f63616c686f73743a383038302f6170692f6d6574616474612f",
  "deployedBytecode": "0x60806040526004361061021a5760003560e01c806370a0823111610123578063b88d4fde116100ab578063e40e97a71161006f578063e40e97a714610824578063e985e9c51461084d578063f09542b31461088a578063f2fde38b146108ba578063fc1a1c36146108e35761021a565b8063b88d4fde1461074e578063c0fb5e8f14610777578063c87b56dd14610793578063ca847633146107d0578063d9583b9f146107fb5761021a565b80638cba90b0116100f25780638cba90b0146106555780638da5cb5b1461069257806395d89b41146106bd578063a22cb465146106e8578063a69a6e82146107115761021a565b806370a0823114610599578063715018a6146105d657806379d72794146105ed5780638456cb591461062a5761021a565b8063329ea90d116101a657806342842e0e1161017557806342842e0e1461048e578063438b6300146104b75780634f6ccce7146104f45780635c975abb146105315780636352211e1461055c5761021a565b8063329ea90d146103e65780633ccfd60b146104235780633d59cd601461043a5780633f4ba83a146104635761021a565b8063095ea7b3116101ed578063095ea7b3146102ef578063120f91d51461031857806318160ddd1461035557806323b872dd146103805780632f745c59146103a95761021a565b806301ffc9a71461021f57806302ce58131461025c57806306fdde0314610287578063081812fc146102b2575b600080fd5b34801561022b57600080fd5b50610246600480360381019061024191906133bb565b61090e565b6040516102539190613403565b60405180910390f35b34801561026857600080fd5b50610271610988565b60405161027e9190613403565b60405180910390f35b34801561029357600080fd5b5061029c61099b565b6040516102a991906134b7565b60405180910390f35b3480156102be57600080fd5b506102d960048036038101906102d4919061350f565b610a2d565b6040516102e6919061357d565b60405180910390f35b3480156102fb57600080fd5b50610316600480360381019061031191906135c4565b610ab2565b005b34801561032457600080fd5b5061033f600480360381019061033a919061350f565b610bca565b60405161034c9190613613565b60405180910390f35b34801561036157600080fd5b5061036a610bee565b6040516103779190613613565b60405180910390f35b34801561038c57600080fd5b506103a760048036038101906103a2919061362e565b610bfb565b005b3480156103b557600080fd5b506103d060048036038101906103cb91906135c4565b610c5b565b6040516103dd9190613613565b60405180910390f35b3480156103f257600080fd5b5061040d600480360381019061040891906137ff565b610d00565b60405161041a9190613403565b60405180910390f35b34801561042f57600080fd5b50610438610db8565b005b34801561044657600080fd5b50610461600480360381019061045c919061385b565b610e8a565b005b34801561046f57600080fd5b50610478610f10565b6040516104859190613403565b60405180910390f35b34801561049a57600080fd5b506104b560048036038101906104b0919061362e565b610f9d565b005b3480156104c357600080fd5b506104de60048036038101906104d99190613888565b610fbd565b6040516104eb9190613973565b60405180910390f35b34801561050057600080fd5b5061051b6004803603810190610516919061350f565b61106b565b6040516105289190613613565b60405180910390f35b34801561053d57600080fd5b506105466110dc565b6040516105539190613403565b60405180910390f35b34801561056857600080fd5b50610583600480360381019061057e919061350f565b6110f3565b604051610590919061357d565b60405180910390f35b3480156105a557600080fd5b506105c060048036038101906105bb9190613888565b6111a5565b6040516105cd9190613613565b60405180910390f35b3480156105e257600080fd5b506105eb61125d565b005b3480156105f957600080fd5b50610614600480360381019061060f91906139ce565b6112e5565b6040516106219190613613565b60405180910390f35b34801561063657600080fd5b5061063f611375565b60405161064c9190613403565b60405180910390f35b34801561066157600080fd5b5061067c6004803603810190610677919061350f565b611402565b6040516106899190613a1d565b60405180910390f35b34801561069e57600080fd5b506106a7611474565b6040516106b4919061357d565b60405180910390f35b3480156106c957600080fd5b506106d261149e565b6040516106df91906134b7565b60405180910390f35b3480156106f457600080fd5b5061070f600480360381019061070a9190613a64565b611530565b005b34801561071d57600080fd5b5061073860048036038101906107339190613b67565b6116b1565b6040516107459190613403565b60405180910390f35b34801561075a57600080fd5b5061077560048036038101906107709190613c65565b61174f565b005b610791600480360381019061078c91906137ff565b6117b1565b005b34801561079f57600080fd5b506107ba60048036038101906107b5919061350f565b6119d6565b6040516107c791906134b7565b60405180910390f35b3480156107dc57600080fd5b506107e5611a58565b6040516107f291906134b7565b60405180910390f35b34801561080757600080fd5b50610822600480360381019061081d9190613ce8565b611ae6565b005b34801561083057600080fd5b5061084b60048036038101906108469190613db6565b611b7f565b005b34801561085957600080fd5b50610874600480360381019061086f9190613dff565b611c15565b6040516108819190613403565b60405180910390f35b6108a4600480360381019061089f9190613e3f565b611ca9565b6040516108b19190613613565b60405180910390f35b3480156108c657600080fd5b506108e160048036038101906108dc9190613888565b611e87565b005b3480156108ef57600080fd5b506108f8611f7f565b6040516109059190613613565b60405180910390f35b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610981575061098082611f85565b5b9050919050565b601060009054906101000a900460ff1681565b6060600080546109aa90613e9b565b80601f01602080910402602001604051908101604052809291908181526020018280546109d690613e9b565b8015610a235780601f106109f857610100808354040283529160200191610a23565b820191906000526020600020905b815481529060010190602001808311610a0657829003601f168201915b5050505050905090565b6000610a3882612067565b610a77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6e90613f3f565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610abd826110f3565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2590613fd1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b4d6120d3565b73ffffffffffffffffffffffffffffffffffffffff161480610b7c5750610b7b81610b766120d3565b611c15565b5b610bbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb290614063565b60405180910390fd5b610bc583836120db565b505050565b600d8181548110610bda57600080fd5b906000526020600020016000915090505481565b6000600880549050905090565b610c0c610c066120d3565b82612194565b610c4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c42906140f5565b60405180910390fd5b610c56838383612272565b505050565b6000610c66836111a5565b8210610ca7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9e90614187565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60008083905060005b8351811015610da9576000848281518110610d2757610d266141a7565b5b6020026020010151905080831015610d69578281604051602001610d4c9291906141f7565b604051602081830303815290604052805190602001209250610d95565b8083604051602001610d7c9291906141f7565b6040516020818303038152906040528051906020012092505b508080610da190614252565b915050610d09565b50601154811491505092915050565b610dc06120d3565b73ffffffffffffffffffffffffffffffffffffffff16610dde611474565b73ffffffffffffffffffffffffffffffffffffffff1614610e34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2b906142e7565b60405180910390fd5b6000479050610e41611474565b73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610e86573d6000803e3d6000fd5b5050565b610e926120d3565b73ffffffffffffffffffffffffffffffffffffffff16610eb0611474565b73ffffffffffffffffffffffffffffffffffffffff1614610f06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efd906142e7565b60405180910390fd5b8060118190555050565b6000610f1a6120d3565b73ffffffffffffffffffffffffffffffffffffffff16610f38611474565b73ffffffffffffffffffffffffffffffffffffffff1614610f8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f85906142e7565b60405180910390fd5b610f966124ce565b6001905090565b610fb88383836040518060200160405280600081525061174f565b505050565b60606000610fca836111a5565b905060008167ffffffffffffffff811115610fe857610fe76136bc565b5b6040519080825280602002602001820160405280156110165781602001602082028036833780820191505090505b50905060005b828110156110605761102e8582610c5b565b828281518110611041576110406141a7565b5b602002602001018181525050808061105890614252565b91505061101c565b508092505050919050565b6000611075610bee565b82106110b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ad90614379565b60405180910390fd5b600882815481106110ca576110c96141a7565b5b90600052602060002001549050919050565b6000600a60009054906101000a900460ff16905090565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561119c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111939061440b565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611216576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120d9061449d565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6112656120d3565b73ffffffffffffffffffffffffffffffffffffffff16611283611474565b73ffffffffffffffffffffffffffffffffffffffff16146112d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d0906142e7565b60405180910390fd5b6112e36000612570565b565b60006112ef6120d3565b73ffffffffffffffffffffffffffffffffffffffff1661130d611474565b73ffffffffffffffffffffffffffffffffffffffff1614611363576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135a906142e7565b60405180910390fd5b61136d8383612636565b905092915050565b600061137f6120d3565b73ffffffffffffffffffffffffffffffffffffffff1661139d611474565b73ffffffffffffffffffffffffffffffffffffffff16146113f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ea906142e7565b60405180910390fd5b6113fb6126f3565b6001905090565b600061140d82612067565b61144c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144390614509565b60405180910390fd5b600c600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546114ad90613e9b565b80601f01602080910402602001604051908101604052809291908181526020018280546114d990613e9b565b80156115265780601f106114fb57610100808354040283529160200191611526565b820191906000526020600020905b81548152906001019060200180831161150957829003601f168201915b5050505050905090565b6115386120d3565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156115a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159d90614575565b60405180910390fd5b80600560006115b36120d3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166116606120d3565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516116a59190613403565b60405180910390a35050565b60006116bb6120d3565b73ffffffffffffffffffffffffffffffffffffffff166116d9611474565b73ffffffffffffffffffffffffffffffffffffffff161461172f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611726906142e7565b60405180910390fd5b81600d908051906020019061174592919061325f565b5060019050919050565b61176061175a6120d3565b83612194565b61179f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611796906140f5565b60405180910390fd5b6117ab84848484612796565b50505050565b6117b96110dc565b156117f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f0906145e1565b60405180910390fd5b6002600b54141561183f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118369061464d565b60405180910390fd5b6002600b81905550601060009054906101000a900460ff16611896576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188d906146b9565b60405180910390fd5b600d6001815481106118ab576118aa6141a7565b5b90600052602060002001543410156118f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ef90614725565b60405180910390fd5b60006119048383610d00565b9050801561191d57611917336002612636565b50611958565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194f90614791565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc600d600181548110611987576119866141a7565b5b90600052602060002001543461199d91906147b1565b9081150290604051600060405180830381858888f193505050501580156119c8573d6000803e3d6000fd5b50506001600b819055505050565b60606119e182612067565b611a20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1790614509565b60405180910390fd5b611a286127f2565b611a3183612884565b604051602001611a42929190614821565b6040516020818303038152906040529050919050565b600f8054611a6590613e9b565b80601f0160208091040260200160405190810160405280929190818152602001828054611a9190613e9b565b8015611ade5780601f10611ab357610100808354040283529160200191611ade565b820191906000526020600020905b815481529060010190602001808311611ac157829003601f168201915b505050505081565b611aee6120d3565b73ffffffffffffffffffffffffffffffffffffffff16611b0c611474565b73ffffffffffffffffffffffffffffffffffffffff1614611b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b59906142e7565b60405180910390fd5b80601060006101000a81548160ff02191690831515021790555050565b611b876120d3565b73ffffffffffffffffffffffffffffffffffffffff16611ba5611474565b73ffffffffffffffffffffffffffffffffffffffff1614611bfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf2906142e7565b60405180910390fd5b80600f9080519060200190611c119291906132ac565b5050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000611cb36110dc565b15611cf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cea906145e1565b60405180910390fd5b6002600b541415611d39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d309061464d565b60405180910390fd5b6002600b81905550601060009054906101000a900460ff1615611d91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8890614891565b60405180910390fd5b600d8260ff1681548110611da857611da76141a7565b5b9060005260206000200154341015611df5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dec906148fd565b60405180910390fd5b6000611e013384612636565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc600d8560ff1681548110611e3457611e336141a7565b5b906000526020600020015434611e4a91906147b1565b9081150290604051600060405180830381858888f19350505050158015611e75573d6000803e3d6000fd5b50809150506001600b81905550919050565b611e8f6120d3565b73ffffffffffffffffffffffffffffffffffffffff16611ead611474565b73ffffffffffffffffffffffffffffffffffffffff1614611f03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611efa906142e7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611f73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6a9061498f565b60405180910390fd5b611f7c81612570565b50565b600e5481565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061205057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612060575061205f826129e5565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661214e836110f3565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061219f82612067565b6121de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d590614a21565b60405180910390fd5b60006121e9836110f3565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061225857508373ffffffffffffffffffffffffffffffffffffffff1661224084610a2d565b73ffffffffffffffffffffffffffffffffffffffff16145b8061226957506122688185611c15565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612292826110f3565b73ffffffffffffffffffffffffffffffffffffffff16146122e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122df90614ab3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612358576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161234f90614b45565b60405180910390fd5b612363838383612a4f565b61236e6000826120db565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123be91906147b1565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546124159190614b65565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6124d66110dc565b612515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250c90614c07565b60405180910390fd5b6000600a60006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6125596120d3565b604051612566919061357d565b60405180910390a1565b6000600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600061264983612644610bee565b612b63565b81600c6000612656610bee565b815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508160ff16600161268a610bee565b61269491906147b1565b8473ffffffffffffffffffffffffffffffffffffffff167faabcc1eb354f11e651c87f835e7de6ac847d514718ed76fad480d55d2632992260405160405180910390a460016126e1610bee565b6126eb91906147b1565b905092915050565b6126fb6110dc565b1561273b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612732906145e1565b60405180910390fd5b6001600a60006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861277f6120d3565b60405161278c919061357d565b60405180910390a1565b6127a1848484612272565b6127ad84848484612b81565b6127ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127e390614c99565b60405180910390fd5b50505050565b6060600f805461280190613e9b565b80601f016020809104026020016040519081016040528092919081815260200182805461282d90613e9b565b801561287a5780601f1061284f5761010080835404028352916020019161287a565b820191906000526020600020905b81548152906001019060200180831161285d57829003601f168201915b5050505050905090565b606060008214156128cc576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506129e0565b600082905060005b600082146128fe5780806128e790614252565b915050600a826128f79190614ce8565b91506128d4565b60008167ffffffffffffffff81111561291a576129196136bc565b5b6040519080825280601f01601f19166020018201604052801561294c5781602001600182028036833780820191505090505b5090505b600085146129d95760018261296591906147b1565b9150600a856129749190614d19565b60306129809190614b65565b60f81b818381518110612996576129956141a7565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856129d29190614ce8565b9450612950565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b612a5a838383612d18565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612a9d57612a9881612d1d565b612adc565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612adb57612ada8382612d66565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612b1f57612b1a81612ed3565b612b5e565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612b5d57612b5c8282612fa4565b5b5b505050565b612b7d828260405180602001604052806000815250613023565b5050565b6000612ba28473ffffffffffffffffffffffffffffffffffffffff1661307e565b15612d0b578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612bcb6120d3565b8786866040518563ffffffff1660e01b8152600401612bed9493929190614d9f565b602060405180830381600087803b158015612c0757600080fd5b505af1925050508015612c3857506040513d601f19601f82011682018060405250810190612c359190614e00565b60015b612cbb573d8060008114612c68576040519150601f19603f3d011682016040523d82523d6000602084013e612c6d565b606091505b50600081511415612cb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612caa90614c99565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612d10565b600190505b949350505050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006001612d73846111a5565b612d7d91906147b1565b9050600060076000848152602001908152602001600020549050818114612e62576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b60006001600880549050612ee791906147b1565b9050600060096000848152602001908152602001600020549050600060088381548110612f1757612f166141a7565b5b906000526020600020015490508060088381548110612f3957612f386141a7565b5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480612f8857612f87614e2d565b5b6001900381819060005260206000200160009055905550505050565b6000612faf836111a5565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b61302d8383613091565b61303a6000848484612b81565b613079576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161307090614c99565b60405180910390fd5b505050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613101576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130f890614ea8565b60405180910390fd5b61310a81612067565b1561314a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161314190614f14565b60405180910390fd5b61315660008383612a4f565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546131a69190614b65565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b82805482825590600052602060002090810192821561329b579160200282015b8281111561329a57825182559160200191906001019061327f565b5b5090506132a89190613332565b5090565b8280546132b890613e9b565b90600052602060002090601f0160209004810192826132da5760008555613321565b82601f106132f357805160ff1916838001178555613321565b82800160010185558215613321579182015b82811115613320578251825591602001919060010190613305565b5b50905061332e9190613332565b5090565b5b8082111561334b576000816000905550600101613333565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61339881613363565b81146133a357600080fd5b50565b6000813590506133b58161338f565b92915050565b6000602082840312156133d1576133d0613359565b5b60006133df848285016133a6565b91505092915050565b60008115159050919050565b6133fd816133e8565b82525050565b600060208201905061341860008301846133f4565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561345857808201518184015260208101905061343d565b83811115613467576000848401525b50505050565b6000601f19601f8301169050919050565b60006134898261341e565b6134938185613429565b93506134a381856020860161343a565b6134ac8161346d565b840191505092915050565b600060208201905081810360008301526134d1818461347e565b905092915050565b6000819050919050565b6134ec816134d9565b81146134f757600080fd5b50565b600081359050613509816134e3565b92915050565b60006020828403121561352557613524613359565b5b6000613533848285016134fa565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006135678261353c565b9050919050565b6135778161355c565b82525050565b6000602082019050613592600083018461356e565b92915050565b6135a18161355c565b81146135ac57600080fd5b50565b6000813590506135be81613598565b92915050565b600080604083850312156135db576135da613359565b5b60006135e9858286016135af565b92505060206135fa858286016134fa565b9150509250929050565b61360d816134d9565b82525050565b60006020820190506136286000830184613604565b92915050565b60008060006060848603121561364757613646613359565b5b6000613655868287016135af565b9350506020613666868287016135af565b9250506040613677868287016134fa565b9150509250925092565b6000819050919050565b61369481613681565b811461369f57600080fd5b50565b6000813590506136b18161368b565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6136f48261346d565b810181811067ffffffffffffffff82111715613713576137126136bc565b5b80604052505050565b600061372661334f565b905061373282826136eb565b919050565b600067ffffffffffffffff821115613752576137516136bc565b5b602082029050602081019050919050565b600080fd5b600061377b61377684613737565b61371c565b9050808382526020820190506020840283018581111561379e5761379d613763565b5b835b818110156137c757806137b388826136a2565b8452602084019350506020810190506137a0565b5050509392505050565b600082601f8301126137e6576137e56136b7565b5b81356137f6848260208601613768565b91505092915050565b6000806040838503121561381657613815613359565b5b6000613824858286016136a2565b925050602083013567ffffffffffffffff8111156138455761384461335e565b5b613851858286016137d1565b9150509250929050565b60006020828403121561387157613870613359565b5b600061387f848285016136a2565b91505092915050565b60006020828403121561389e5761389d613359565b5b60006138ac848285016135af565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6138ea816134d9565b82525050565b60006138fc83836138e1565b60208301905092915050565b6000602082019050919050565b6000613920826138b5565b61392a81856138c0565b9350613935836138d1565b8060005b8381101561396657815161394d88826138f0565b975061395883613908565b925050600181019050613939565b5085935050505092915050565b6000602082019050818103600083015261398d8184613915565b905092915050565b600060ff82169050919050565b6139ab81613995565b81146139b657600080fd5b50565b6000813590506139c8816139a2565b92915050565b600080604083850312156139e5576139e4613359565b5b60006139f3858286016135af565b9250506020613a04858286016139b9565b9150509250929050565b613a1781613995565b82525050565b6000602082019050613a326000830184613a0e565b92915050565b613a41816133e8565b8114613a4c57600080fd5b50565b600081359050613a5e81613a38565b92915050565b60008060408385031215613a7b57613a7a613359565b5b6000613a89858286016135af565b9250506020613a9a85828601613a4f565b9150509250929050565b600067ffffffffffffffff821115613abf57613abe6136bc565b5b602082029050602081019050919050565b6000613ae3613ade84613aa4565b61371c565b90508083825260208201905060208402830185811115613b0657613b05613763565b5b835b81811015613b2f5780613b1b88826134fa565b845260208401935050602081019050613b08565b5050509392505050565b600082601f830112613b4e57613b4d6136b7565b5b8135613b5e848260208601613ad0565b91505092915050565b600060208284031215613b7d57613b7c613359565b5b600082013567ffffffffffffffff811115613b9b57613b9a61335e565b5b613ba784828501613b39565b91505092915050565b600080fd5b600067ffffffffffffffff821115613bd057613bcf6136bc565b5b613bd98261346d565b9050602081019050919050565b82818337600083830152505050565b6000613c08613c0384613bb5565b61371c565b905082815260208101848484011115613c2457613c23613bb0565b5b613c2f848285613be6565b509392505050565b600082601f830112613c4c57613c4b6136b7565b5b8135613c5c848260208601613bf5565b91505092915050565b60008060008060808587031215613c7f57613c7e613359565b5b6000613c8d878288016135af565b9450506020613c9e878288016135af565b9350506040613caf878288016134fa565b925050606085013567ffffffffffffffff811115613cd057613ccf61335e565b5b613cdc87828801613c37565b91505092959194509250565b600060208284031215613cfe57613cfd613359565b5b6000613d0c84828501613a4f565b91505092915050565b600067ffffffffffffffff821115613d3057613d2f6136bc565b5b613d398261346d565b9050602081019050919050565b6000613d59613d5484613d15565b61371c565b905082815260208101848484011115613d7557613d74613bb0565b5b613d80848285613be6565b509392505050565b600082601f830112613d9d57613d9c6136b7565b5b8135613dad848260208601613d46565b91505092915050565b600060208284031215613dcc57613dcb613359565b5b600082013567ffffffffffffffff811115613dea57613de961335e565b5b613df684828501613d88565b91505092915050565b60008060408385031215613e1657613e15613359565b5b6000613e24858286016135af565b9250506020613e35858286016135af565b9150509250929050565b600060208284031215613e5557613e54613359565b5b6000613e63848285016139b9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613eb357607f821691505b60208210811415613ec757613ec6613e6c565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000613f29602c83613429565b9150613f3482613ecd565b604082019050919050565b60006020820190508181036000830152613f5881613f1c565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613fbb602183613429565b9150613fc682613f5f565b604082019050919050565b60006020820190508181036000830152613fea81613fae565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b600061404d603883613429565b915061405882613ff1565b604082019050919050565b6000602082019050818103600083015261407c81614040565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b60006140df603183613429565b91506140ea82614083565b604082019050919050565b6000602082019050818103600083015261410e816140d2565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000614171602b83613429565b915061417c82614115565b604082019050919050565b600060208201905081810360008301526141a081614164565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b6141f16141ec82613681565b6141d6565b82525050565b600061420382856141e0565b60208201915061421382846141e0565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061425d826134d9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156142905761428f614223565b5b600182019050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006142d1602083613429565b91506142dc8261429b565b602082019050919050565b60006020820190508181036000830152614300816142c4565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000614363602c83613429565b915061436e82614307565b604082019050919050565b6000602082019050818103600083015261439281614356565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b60006143f5602983613429565b915061440082614399565b604082019050919050565b60006020820190508181036000830152614424816143e8565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000614487602a83613429565b91506144928261442b565b604082019050919050565b600060208201905081810360008301526144b68161447a565b9050919050565b7f546f6b656e20646f6573206e6f74206578697374000000000000000000000000600082015250565b60006144f3601483613429565b91506144fe826144bd565b602082019050919050565b60006020820190508181036000830152614522816144e6565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061455f601983613429565b915061456a82614529565b602082019050919050565b6000602082019050818103600083015261458e81614552565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006145cb601083613429565b91506145d682614595565b602082019050919050565b600060208201905081810360008301526145fa816145be565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614637601f83613429565b915061464282614601565b602082019050919050565b600060208201905081810360008301526146668161462a565b9050919050565b7f57686974656c697374206973206e6f7420616374697665000000000000000000600082015250565b60006146a3601783613429565b91506146ae8261466d565b602082019050919050565b600060208201905081810360008301526146d281614696565b9050919050565b7f4e6f7420656e6f7567687420424e420000000000000000000000000000000000600082015250565b600061470f600f83613429565b915061471a826146d9565b602082019050919050565b6000602082019050818103600083015261473e81614702565b9050919050565b7f4e6f742077686974656c69737465640000000000000000000000000000000000600082015250565b600061477b600f83613429565b915061478682614745565b602082019050919050565b600060208201905081810360008301526147aa8161476e565b9050919050565b60006147bc826134d9565b91506147c7836134d9565b9250828210156147da576147d9614223565b5b828203905092915050565b600081905092915050565b60006147fb8261341e565b61480581856147e5565b935061481581856020860161343a565b80840191505092915050565b600061482d82856147f0565b915061483982846147f0565b91508190509392505050565b7f57686974656c6973742069732061637469766500000000000000000000000000600082015250565b600061487b601383613429565b915061488682614845565b602082019050919050565b600060208201905081810360008301526148aa8161486e565b9050919050565b7f4e6f7420656e6f75676820424e42000000000000000000000000000000000000600082015250565b60006148e7600e83613429565b91506148f2826148b1565b602082019050919050565b60006020820190508181036000830152614916816148da565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614979602683613429565b91506149848261491d565b604082019050919050565b600060208201905081810360008301526149a88161496c565b9050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000614a0b602c83613429565b9150614a16826149af565b604082019050919050565b60006020820190508181036000830152614a3a816149fe565b9050919050565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b6000614a9d602983613429565b9150614aa882614a41565b604082019050919050565b60006020820190508181036000830152614acc81614a90565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000614b2f602483613429565b9150614b3a82614ad3565b604082019050919050565b60006020820190508181036000830152614b5e81614b22565b9050919050565b6000614b70826134d9565b9150614b7b836134d9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614bb057614baf614223565b5b828201905092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000614bf1601483613429565b9150614bfc82614bbb565b602082019050919050565b60006020820190508181036000830152614c2081614be4565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614c83603283613429565b9150614c8e82614c27565b604082019050919050565b60006020820190508181036000830152614cb281614c76565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614cf3826134d9565b9150614cfe836134d9565b925082614d0e57614d0d614cb9565b5b828204905092915050565b6000614d24826134d9565b9150614d2f836134d9565b925082614d3f57614d3e614cb9565b5b828206905092915050565b600081519050919050565b600082825260208201905092915050565b6000614d7182614d4a565b614d7b8185614d55565b9350614d8b81856020860161343a565b614d948161346d565b840191505092915050565b6000608082019050614db4600083018761356e565b614dc1602083018661356e565b614dce6040830185613604565b8181036060830152614de08184614d66565b905095945050505050565b600081519050614dfa8161338f565b92915050565b600060208284031215614e1657614e15613359565b5b6000614e2484828501614deb565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614e92602083613429565b9150614e9d82614e5c565b602082019050919050565b60006020820190508181036000830152614ec181614e85565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000614efe601c83613429565b9150614f0982614ec8565b602082019050919050565b60006020820190508181036000830152614f2d81614ef1565b905091905056fea2646970667358221220caa38221aadf74f7ea8d90ba2b182089b246c3c99119b56543bc44cca93c68a964736f6c63430008090033",
=======
  "solcInputHash": "b18a4223b37518bef916a63f01832229",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"_boxType\",\"type\":\"uint8\"}],\"name\":\"MintNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boxPriceBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boxPriceBURG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseTokenURI\",\"type\":\"string\"}],\"name\":\"changeBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"changeRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"changeWhitelistState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getboxTypeById\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"boxType\",\"type\":\"uint8\"}],\"name\":\"mintNormal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"boxType\",\"type\":\"uint8\"}],\"name\":\"mintNormalBURG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"boxType\",\"type\":\"uint8\"}],\"name\":\"mintOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"mintWhitelist\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleBNBEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleBURGEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setBURGAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strBaseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newBoxPricesBNB\",\"type\":\"uint256[]\"}],\"name\":\"updateBoxPricesBNB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newBoxPricesBURG\",\"type\":\"uint256[]\"}],\"name\":\"updateBoxPricesBURG\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Burguer.sol\":\"Burger\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BurgToken.sol\":{\"content\":\"/*\\nCRYPTOBURGERS\\nWeb: https://cryptoburgers.io\\nTelegram: https://t.me/cryptoburgersnft\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/access/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/extensions/ERC20Capped.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/extensions/ERC20Pausable.sol\\\";\\n\\ncontract BurgToken is ERC20Capped, Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    constructor() ERC20(\\\"BURG Token\\\", \\\"BURG\\\") ERC20Capped(100 * 1e6 * 1e18) {\\n        _mint(msg.sender, 10000 * 1e18);\\n    }\\n\\n    function burn(address _account, uint256 _amount) external returns (bool) {\\n        _burn(_account, _amount);\\n        return true;\\n    }\\n\\n    function mint(address _account, uint256 _amount)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        _mint(_account, _amount);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x26765a3e32e0f3d0324784d3fe959f2af8ef6873ed7429d5ed1077f355412159\",\"license\":\"MIT\"},\"contracts/Burguer.sol\":{\"content\":\"/*\\nCRYPTOBURGERS\\nWeb: https://cryptoburgers.io\\nTelegram: https://t.me/cryptoburgersnft\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/security/Pausable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/access/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./BurgToken.sol\\\";\\n\\ncontract Burger is ERC721Enumerable, Pausable, Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    mapping(uint256 => uint8) private boxTypeById;\\n\\n    uint256[] public boxPriceBNB = [1e16, 2 * 1e16, 3 * 1e16];\\n    uint256[] public boxPriceBURG = [1e16, 2 * 1e16, 3 * 1e16];\\n\\n    uint256 public whitelistPrice = 2 * 1e16;\\n    string public strBaseTokenURI =\\n        \\\"https://backend.cryptoburgers.io/metadata/\\\";\\n\\n    bool public saleBNBEnabled = false;\\n    bool public saleBURGEnabled = true;\\n\\n    // Change to true in the mainnet deploy.\\n    bool public whitelistActive = false;\\n    bytes32 private root =\\n        0x786cc6a5c4201b7672450409f6a717d0e33e88369e82ed52b453ec0cfcc4b23d;\\n\\n    address BURG;\\n\\n    event MintNFT(\\n        address indexed _to,\\n        uint256 indexed _id,\\n        uint8 indexed _boxType\\n    );\\n\\n    constructor() ERC721(\\\"Burger\\\", \\\"BURGER\\\") {\\n        // Uncomment if we want deploy paused\\n        // _pause();\\n    }\\n\\n    function mintWhitelist(bytes32 leaf, bytes32[] memory proof)\\n        external\\n        payable\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        require(whitelistActive, \\\"Whitelist is not active\\\");\\n        require(msg.value >= boxPriceBNB[1], \\\"Not enought BNB\\\");\\n\\n        bool isWhitelisted = verifyWhitelist(leaf, proof);\\n\\n        if (isWhitelisted) {\\n            mint(msg.sender, 2);\\n        } else {\\n            revert(\\\"Not whitelisted\\\");\\n        }\\n\\n        payable(msg.sender).transfer(msg.value - boxPriceBNB[1]);\\n    }\\n\\n    function mintOwner(address _to, uint8 boxType)\\n        external\\n        onlyOwner\\n        returns (uint256)\\n    {\\n        return mint(_to, boxType);\\n    }\\n\\n    function mintNormal(uint8 boxType)\\n        external\\n        payable\\n        whenNotPaused\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        require(!whitelistActive, \\\"Whitelist is active\\\");\\n        require(saleBNBEnabled, \\\"Sales in BNB are not permitted\\\");\\n        require(msg.value >= boxPriceBNB[boxType], \\\"Not enought BNB\\\");\\n        uint256 idMinted = mint(msg.sender, boxType);\\n        payable(msg.sender).transfer(msg.value - boxPriceBNB[boxType]);\\n        return idMinted;\\n    }\\n\\n    function mintNormalBURG(uint8 boxType)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        require(!whitelistActive, \\\"Whitelist is active\\\");\\n        require(saleBURGEnabled, \\\"Sales in BNB are not permitted\\\");\\n        require(\\n            IERC20(BURG).allowance(msg.sender, address(this)) >=\\n                boxPriceBURG[boxType],\\n            \\\"Not enought allowance\\\"\\n        );\\n\\n        BurgToken(BURG).transferFrom(\\n            msg.sender,\\n            owner(),\\n            boxPriceBURG[boxType].mul(8).div(100)\\n        );\\n        BurgToken(BURG).burn(msg.sender, boxPriceBURG[boxType].mul(92).div(100));\\n\\n        uint256 idMinted = mint(msg.sender, boxType);\\n        return idMinted;\\n    }\\n\\n    function mint(address _to, uint8 boxType) internal returns (uint256) {\\n        _safeMint(_to, totalSupply());\\n        boxTypeById[totalSupply()] = boxType;\\n\\n        emit MintNFT(_to, totalSupply(), boxType);\\n\\n        return totalSupply();\\n    }\\n\\n    function walletOfOwner(address _owner)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256 tokenCount = balanceOf(_owner);\\n        uint256[] memory tokensId = new uint256[](tokenCount);\\n        for (uint256 i = 0; i < tokenCount; i++) {\\n            tokensId[i] = tokenOfOwnerByIndex(_owner, i);\\n        }\\n        return tokensId;\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        payable(owner()).transfer(balance);\\n    }\\n\\n    function changeBaseTokenURI(string memory newBaseTokenURI)\\n        external\\n        onlyOwner\\n    {\\n        strBaseTokenURI = newBaseTokenURI;\\n    }\\n\\n    function changeWhitelistState(bool newState) external onlyOwner {\\n        whitelistActive = newState;\\n    }\\n\\n    function changeRoot(bytes32 newRoot) external onlyOwner {\\n        root = newRoot;\\n    }\\n\\n    function verifyWhitelist(bytes32 leaf, bytes32[] memory proof)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash < proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(\\n                    abi.encodePacked(computedHash, proofElement)\\n                );\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(\\n                    abi.encodePacked(proofElement, computedHash)\\n                );\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n\\n    function updateBoxPricesBNB(uint256[] memory _newBoxPricesBNB)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        boxPriceBNB = _newBoxPricesBNB;\\n        return true;\\n    }\\n\\n    function updateBoxPricesBURG(uint256[] memory _newBoxPricesBURG)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        boxPriceBURG = _newBoxPricesBURG;\\n        return true;\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return strBaseTokenURI;\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(_tokenId), \\\"Token does not exist\\\");\\n        return string(abi.encodePacked(_baseURI(), Strings.toString(_tokenId)));\\n    }\\n\\n    function getboxTypeById(uint256 _tokenId) external view returns (uint8) {\\n        require(_exists(_tokenId), \\\"Token does not exist\\\");\\n        return boxTypeById[_tokenId];\\n    }\\n\\n    function pause() external onlyOwner returns (bool) {\\n        _pause();\\n        return true;\\n    }\\n\\n    function unpause() external onlyOwner returns (bool) {\\n        _unpause();\\n        return true;\\n    }\\n\\n    function setBURGAddress(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        BURG = _newAddress;\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x66ac78618a4bca03789a044add1b995a1c578a448cac113a799ce01e900fb8c8\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf98cb1651a90d20ef77d8c1dd10d5fce4954e747603e5672a8292bd4368120dd\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/extensions/ERC20Capped.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\\n */\\nabstract contract ERC20Capped is ERC20 {\\n    uint256 private immutable _cap;\\n\\n    /**\\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\\n     * set once during construction.\\n     */\\n    constructor(uint256 cap_) {\\n        require(cap_ > 0, \\\"ERC20Capped: cap is 0\\\");\\n        _cap = cap_;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view virtual returns (uint256) {\\n        return _cap;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_mint}.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        require(ERC20.totalSupply() + amount <= cap(), \\\"ERC20Capped: cap exceeded\\\");\\n        super._mint(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x861c86995be13aae31adcd5d3fedd5a9777e1882fa1bca0a86115f63bda07de1\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb6d09c0a37d1222bff59fb166567558c057bab36b96a8457de29f25afd6e87b2\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040518060600160405280662386f26fc1000066ffffffffffffff16815260200166470de4df82000066ffffffffffffff168152602001666a94d74f43000066ffffffffffffff16815250600d906003620000619291906200033a565b506040518060600160405280662386f26fc1000066ffffffffffffff16815260200166470de4df82000066ffffffffffffff168152602001666a94d74f43000066ffffffffffffff16815250600e906003620000bf9291906200033a565b5066470de4df820000600f556040518060600160405280602a815260200162005df5602a913960109080519060200190620000fc92919062000397565b506000601160006101000a81548160ff0219169083151502179055506001601160016101000a81548160ff0219169083151502179055506000601160026101000a81548160ff0219169083151502179055507f786cc6a5c4201b7672450409f6a717d0e33e88369e82ed52b453ec0cfcc4b23d60001b6012553480156200018257600080fd5b506040518060400160405280600681526020017f42757267657200000000000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f425552474552000000000000000000000000000000000000000000000000000081525081600090805190602001906200020792919062000397565b5080600190805190602001906200022092919062000397565b5050506000600a60006101000a81548160ff0219169083151502179055506200025e620002526200026c60201b60201c565b6200027460201b60201c565b6001600b81905550620004ac565b600033905090565b6000600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82805482825590600052602060002090810192821562000384579160200282015b8281111562000383578251829066ffffffffffffff169055916020019190600101906200035b565b5b50905062000393919062000428565b5090565b828054620003a59062000476565b90600052602060002090601f016020900481019282620003c9576000855562000415565b82601f10620003e457805160ff191683800117855562000415565b8280016001018555821562000415579182015b8281111562000414578251825591602001919060010190620003f7565b5b50905062000424919062000428565b5090565b5b808211156200044357600081600090555060010162000429565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200048f57607f821691505b60208210811415620004a657620004a562000447565b5b50919050565b61593980620004bc6000396000f3fe60806040526004361061025c5760003560e01c8063715018a611610144578063c0fb5e8f116100b6578063e0d5f5db1161007a578063e0d5f5db14610973578063e40e97a7146109b0578063e985e9c5146109d9578063f09542b314610a16578063f2fde38b14610a46578063fc1a1c3614610a6f5761025c565b8063c0fb5e8f14610889578063c87b56dd146108a5578063ca847633146108e2578063d124d28f1461090d578063d9583b9f1461094a5761025c565b80638cba90b0116101085780638cba90b0146107675780638da5cb5b146107a457806395d89b41146107cf578063a22cb465146107fa578063a69a6e8214610823578063b88d4fde146108605761025c565b8063715018a61461066e57806379d72794146106855780637b125a1d146106c25780638456cb59146106ff57806387ddb7b71461072a5761025c565b80632f745c59116101dd57806342842e0e116101a157806342842e0e14610526578063438b63001461054f5780634f6ccce71461058c5780635c975abb146105c95780636352211e146105f457806370a08231146106315761025c565b80632f745c5914610441578063329ea90d1461047e5780633ccfd60b146104bb5780633d59cd60146104d25780633f4ba83a146104fb5761025c565b8063120f91d511610224578063120f91d51461035a578063158d9ac31461039757806318160ddd146103c257806323b872dd146103ed57806329c7f1fa146104165761025c565b806301ffc9a71461026157806302ce58131461029e57806306fdde03146102c9578063081812fc146102f4578063095ea7b314610331575b600080fd5b34801561026d57600080fd5b5061028860048036038101906102839190613bb7565b610a9a565b6040516102959190613bff565b60405180910390f35b3480156102aa57600080fd5b506102b3610b14565b6040516102c09190613bff565b60405180910390f35b3480156102d557600080fd5b506102de610b27565b6040516102eb9190613cb3565b60405180910390f35b34801561030057600080fd5b5061031b60048036038101906103169190613d0b565b610bb9565b6040516103289190613d79565b60405180910390f35b34801561033d57600080fd5b5061035860048036038101906103539190613dc0565b610c3e565b005b34801561036657600080fd5b50610381600480360381019061037c9190613d0b565b610d56565b60405161038e9190613e0f565b60405180910390f35b3480156103a357600080fd5b506103ac610d7a565b6040516103b99190613bff565b60405180910390f35b3480156103ce57600080fd5b506103d7610d8d565b6040516103e49190613e0f565b60405180910390f35b3480156103f957600080fd5b50610414600480360381019061040f9190613e2a565b610d9a565b005b34801561042257600080fd5b5061042b610dfa565b6040516104389190613bff565b60405180910390f35b34801561044d57600080fd5b5061046860048036038101906104639190613dc0565b610e0d565b6040516104759190613e0f565b60405180910390f35b34801561048a57600080fd5b506104a560048036038101906104a09190613ffb565b610eb2565b6040516104b29190613bff565b60405180910390f35b3480156104c757600080fd5b506104d0610f6a565b005b3480156104de57600080fd5b506104f960048036038101906104f49190614057565b61103c565b005b34801561050757600080fd5b506105106110c2565b60405161051d9190613bff565b60405180910390f35b34801561053257600080fd5b5061054d60048036038101906105489190613e2a565b61114f565b005b34801561055b57600080fd5b5061057660048036038101906105719190614084565b61116f565b604051610583919061416f565b60405180910390f35b34801561059857600080fd5b506105b360048036038101906105ae9190613d0b565b61121d565b6040516105c09190613e0f565b60405180910390f35b3480156105d557600080fd5b506105de61128e565b6040516105eb9190613bff565b60405180910390f35b34801561060057600080fd5b5061061b60048036038101906106169190613d0b565b6112a5565b6040516106289190613d79565b60405180910390f35b34801561063d57600080fd5b5061065860048036038101906106539190614084565b611357565b6040516106659190613e0f565b60405180910390f35b34801561067a57600080fd5b5061068361140f565b005b34801561069157600080fd5b506106ac60048036038101906106a791906141ca565b611497565b6040516106b99190613e0f565b60405180910390f35b3480156106ce57600080fd5b506106e960048036038101906106e49190614084565b611527565b6040516106f69190613bff565b60405180910390f35b34801561070b57600080fd5b506107146115ef565b6040516107219190613bff565b60405180910390f35b34801561073657600080fd5b50610751600480360381019061074c9190613d0b565b61167c565b60405161075e9190613e0f565b60405180910390f35b34801561077357600080fd5b5061078e60048036038101906107899190613d0b565b6116a0565b60405161079b9190614219565b60405180910390f35b3480156107b057600080fd5b506107b9611712565b6040516107c69190613d79565b60405180910390f35b3480156107db57600080fd5b506107e461173c565b6040516107f19190613cb3565b60405180910390f35b34801561080657600080fd5b50610821600480360381019061081c9190614260565b6117ce565b005b34801561082f57600080fd5b5061084a60048036038101906108459190614363565b61194f565b6040516108579190613bff565b60405180910390f35b34801561086c57600080fd5b5061088760048036038101906108829190614461565b6119ed565b005b6108a3600480360381019061089e9190613ffb565b611a4f565b005b3480156108b157600080fd5b506108cc60048036038101906108c79190613d0b565b611c74565b6040516108d99190613cb3565b60405180910390f35b3480156108ee57600080fd5b506108f7611cf6565b6040516109049190613cb3565b60405180910390f35b34801561091957600080fd5b50610934600480360381019061092f91906144e4565b611d84565b6040516109419190613e0f565b60405180910390f35b34801561095657600080fd5b50610971600480360381019061096c9190614511565b6121e1565b005b34801561097f57600080fd5b5061099a60048036038101906109959190614363565b61227a565b6040516109a79190613bff565b60405180910390f35b3480156109bc57600080fd5b506109d760048036038101906109d291906145df565b612318565b005b3480156109e557600080fd5b50610a0060048036038101906109fb9190614628565b6123ae565b604051610a0d9190613bff565b60405180910390f35b610a306004803603810190610a2b91906144e4565b612442565b604051610a3d9190613e0f565b60405180910390f35b348015610a5257600080fd5b50610a6d6004803603810190610a689190614084565b61266f565b005b348015610a7b57600080fd5b50610a84612767565b604051610a919190613e0f565b60405180910390f35b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610b0d5750610b0c8261276d565b5b9050919050565b601160029054906101000a900460ff1681565b606060008054610b3690614697565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6290614697565b8015610baf5780601f10610b8457610100808354040283529160200191610baf565b820191906000526020600020905b815481529060010190602001808311610b9257829003601f168201915b5050505050905090565b6000610bc48261284f565b610c03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfa9061473b565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610c49826112a5565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610cba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb1906147cd565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610cd96128bb565b73ffffffffffffffffffffffffffffffffffffffff161480610d085750610d0781610d026128bb565b6123ae565b5b610d47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3e9061485f565b60405180910390fd5b610d5183836128c3565b505050565b600d8181548110610d6657600080fd5b906000526020600020016000915090505481565b601160019054906101000a900460ff1681565b6000600880549050905090565b610dab610da56128bb565b8261297c565b610dea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de1906148f1565b60405180910390fd5b610df5838383612a5a565b505050565b601160009054906101000a900460ff1681565b6000610e1883611357565b8210610e59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5090614983565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60008083905060005b8351811015610f5b576000848281518110610ed957610ed86149a3565b5b6020026020010151905080831015610f1b578281604051602001610efe9291906149f3565b604051602081830303815290604052805190602001209250610f47565b8083604051602001610f2e9291906149f3565b6040516020818303038152906040528051906020012092505b508080610f5390614a4e565b915050610ebb565b50601254811491505092915050565b610f726128bb565b73ffffffffffffffffffffffffffffffffffffffff16610f90611712565b73ffffffffffffffffffffffffffffffffffffffff1614610fe6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fdd90614ae3565b60405180910390fd5b6000479050610ff3611712565b73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611038573d6000803e3d6000fd5b5050565b6110446128bb565b73ffffffffffffffffffffffffffffffffffffffff16611062611712565b73ffffffffffffffffffffffffffffffffffffffff16146110b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110af90614ae3565b60405180910390fd5b8060128190555050565b60006110cc6128bb565b73ffffffffffffffffffffffffffffffffffffffff166110ea611712565b73ffffffffffffffffffffffffffffffffffffffff1614611140576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113790614ae3565b60405180910390fd5b611148612cb6565b6001905090565b61116a838383604051806020016040528060008152506119ed565b505050565b6060600061117c83611357565b905060008167ffffffffffffffff81111561119a57611199613eb8565b5b6040519080825280602002602001820160405280156111c85781602001602082028036833780820191505090505b50905060005b82811015611212576111e08582610e0d565b8282815181106111f3576111f26149a3565b5b602002602001018181525050808061120a90614a4e565b9150506111ce565b508092505050919050565b6000611227610d8d565b8210611268576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125f90614b75565b60405180910390fd5b6008828154811061127c5761127b6149a3565b5b90600052602060002001549050919050565b6000600a60009054906101000a900460ff16905090565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561134e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134590614c07565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156113c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113bf90614c99565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6114176128bb565b73ffffffffffffffffffffffffffffffffffffffff16611435611712565b73ffffffffffffffffffffffffffffffffffffffff161461148b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148290614ae3565b60405180910390fd5b6114956000612d58565b565b60006114a16128bb565b73ffffffffffffffffffffffffffffffffffffffff166114bf611712565b73ffffffffffffffffffffffffffffffffffffffff1614611515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150c90614ae3565b60405180910390fd5b61151f8383612e1e565b905092915050565b60006115316128bb565b73ffffffffffffffffffffffffffffffffffffffff1661154f611712565b73ffffffffffffffffffffffffffffffffffffffff16146115a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159c90614ae3565b60405180910390fd5b81601360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b60006115f96128bb565b73ffffffffffffffffffffffffffffffffffffffff16611617611712565b73ffffffffffffffffffffffffffffffffffffffff161461166d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166490614ae3565b60405180910390fd5b611675612ec3565b6001905090565b600e818154811061168c57600080fd5b906000526020600020016000915090505481565b60006116ab8261284f565b6116ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e190614d05565b60405180910390fd5b600c600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461174b90614697565b80601f016020809104026020016040519081016040528092919081815260200182805461177790614697565b80156117c45780601f10611799576101008083540402835291602001916117c4565b820191906000526020600020905b8154815290600101906020018083116117a757829003601f168201915b5050505050905090565b6117d66128bb565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611844576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183b90614d71565b60405180910390fd5b80600560006118516128bb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166118fe6128bb565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516119439190613bff565b60405180910390a35050565b60006119596128bb565b73ffffffffffffffffffffffffffffffffffffffff16611977611712565b73ffffffffffffffffffffffffffffffffffffffff16146119cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c490614ae3565b60405180910390fd5b81600d90805190602001906119e3929190613a5b565b5060019050919050565b6119fe6119f86128bb565b8361297c565b611a3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a34906148f1565b60405180910390fd5b611a4984848484612f66565b50505050565b611a5761128e565b15611a97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8e90614ddd565b60405180910390fd5b6002600b541415611add576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad490614e49565b60405180910390fd5b6002600b81905550601160029054906101000a900460ff16611b34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2b90614eb5565b60405180910390fd5b600d600181548110611b4957611b486149a3565b5b9060005260206000200154341015611b96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8d90614f21565b60405180910390fd5b6000611ba28383610eb2565b90508015611bbb57611bb5336002612e1e565b50611bf6565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bed90614f8d565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc600d600181548110611c2557611c246149a3565b5b906000526020600020015434611c3b9190614fad565b9081150290604051600060405180830381858888f19350505050158015611c66573d6000803e3d6000fd5b50506001600b819055505050565b6060611c7f8261284f565b611cbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb590614d05565b60405180910390fd5b611cc6612fc2565b611ccf83613054565b604051602001611ce092919061501d565b6040516020818303038152906040529050919050565b60108054611d0390614697565b80601f0160208091040260200160405190810160405280929190818152602001828054611d2f90614697565b8015611d7c5780601f10611d5157610100808354040283529160200191611d7c565b820191906000526020600020905b815481529060010190602001808311611d5f57829003601f168201915b505050505081565b6000611d8e61128e565b15611dce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc590614ddd565b60405180910390fd5b6002600b541415611e14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0b90614e49565b60405180910390fd5b6002600b81905550601160029054906101000a900460ff1615611e6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e639061508d565b60405180910390fd5b601160019054906101000a900460ff16611ebb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb2906150f9565b60405180910390fd5b600e8260ff1681548110611ed257611ed16149a3565b5b9060005260206000200154601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401611f3a929190615119565b60206040518083038186803b158015611f5257600080fd5b505afa158015611f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8a9190615157565b1015611fcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc2906151d0565b60405180910390fd5b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33612012611712565b61205a606461204c6008600e8a60ff1681548110612033576120326149a3565b5b90600052602060002001546131b590919063ffffffff16565b6131cb90919063ffffffff16565b6040518463ffffffff1660e01b8152600401612078939291906151f0565b602060405180830381600087803b15801561209257600080fd5b505af11580156120a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ca919061523c565b50601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac336121526064612144605c600e8960ff168154811061212b5761212a6149a3565b5b90600052602060002001546131b590919063ffffffff16565b6131cb90919063ffffffff16565b6040518363ffffffff1660e01b815260040161216f929190615269565b602060405180830381600087803b15801561218957600080fd5b505af115801561219d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c1919061523c565b5060006121ce3384612e1e565b9050809150506001600b81905550919050565b6121e96128bb565b73ffffffffffffffffffffffffffffffffffffffff16612207611712565b73ffffffffffffffffffffffffffffffffffffffff161461225d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225490614ae3565b60405180910390fd5b80601160026101000a81548160ff02191690831515021790555050565b60006122846128bb565b73ffffffffffffffffffffffffffffffffffffffff166122a2611712565b73ffffffffffffffffffffffffffffffffffffffff16146122f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122ef90614ae3565b60405180910390fd5b81600e908051906020019061230e929190613a5b565b5060019050919050565b6123206128bb565b73ffffffffffffffffffffffffffffffffffffffff1661233e611712565b73ffffffffffffffffffffffffffffffffffffffff1614612394576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238b90614ae3565b60405180910390fd5b80601090805190602001906123aa929190613aa8565b5050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600061244c61128e565b1561248c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248390614ddd565b60405180910390fd5b6002600b5414156124d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124c990614e49565b60405180910390fd5b6002600b81905550601160029054906101000a900460ff161561252a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125219061508d565b60405180910390fd5b601160009054906101000a900460ff16612579576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612570906150f9565b60405180910390fd5b600d8260ff16815481106125905761258f6149a3565b5b90600052602060002001543410156125dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125d490614f21565b60405180910390fd5b60006125e93384612e1e565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc600d8560ff168154811061261c5761261b6149a3565b5b9060005260206000200154346126329190614fad565b9081150290604051600060405180830381858888f1935050505015801561265d573d6000803e3d6000fd5b50809150506001600b81905550919050565b6126776128bb565b73ffffffffffffffffffffffffffffffffffffffff16612695611712565b73ffffffffffffffffffffffffffffffffffffffff16146126eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126e290614ae3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561275b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161275290615304565b60405180910390fd5b61276481612d58565b50565b600f5481565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061283857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806128485750612847826131e1565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16612936836112a5565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006129878261284f565b6129c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129bd90615396565b60405180910390fd5b60006129d1836112a5565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612a4057508373ffffffffffffffffffffffffffffffffffffffff16612a2884610bb9565b73ffffffffffffffffffffffffffffffffffffffff16145b80612a515750612a5081856123ae565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612a7a826112a5565b73ffffffffffffffffffffffffffffffffffffffff1614612ad0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ac790615428565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612b40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b37906154ba565b60405180910390fd5b612b4b83838361324b565b612b566000826128c3565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612ba69190614fad565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612bfd91906154da565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b612cbe61128e565b612cfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cf49061557c565b60405180910390fd5b6000600a60006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612d416128bb565b604051612d4e9190613d79565b60405180910390a1565b6000600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000612e3183612e2c610d8d565b61335f565b81600c6000612e3e610d8d565b815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508160ff16612e70610d8d565b8473ffffffffffffffffffffffffffffffffffffffff167faabcc1eb354f11e651c87f835e7de6ac847d514718ed76fad480d55d2632992260405160405180910390a4612ebb610d8d565b905092915050565b612ecb61128e565b15612f0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f0290614ddd565b60405180910390fd5b6001600a60006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612f4f6128bb565b604051612f5c9190613d79565b60405180910390a1565b612f71848484612a5a565b612f7d8484848461337d565b612fbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fb39061560e565b60405180910390fd5b50505050565b606060108054612fd190614697565b80601f0160208091040260200160405190810160405280929190818152602001828054612ffd90614697565b801561304a5780601f1061301f5761010080835404028352916020019161304a565b820191906000526020600020905b81548152906001019060200180831161302d57829003601f168201915b5050505050905090565b6060600082141561309c576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506131b0565b600082905060005b600082146130ce5780806130b790614a4e565b915050600a826130c7919061565d565b91506130a4565b60008167ffffffffffffffff8111156130ea576130e9613eb8565b5b6040519080825280601f01601f19166020018201604052801561311c5781602001600182028036833780820191505090505b5090505b600085146131a9576001826131359190614fad565b9150600a85613144919061568e565b603061315091906154da565b60f81b818381518110613166576131656149a3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856131a2919061565d565b9450613120565b8093505050505b919050565b600081836131c391906156bf565b905092915050565b600081836131d9919061565d565b905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b613256838383613514565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156132995761329481613519565b6132d8565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146132d7576132d68382613562565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561331b57613316816136cf565b61335a565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146133595761335882826137a0565b5b5b505050565b61337982826040518060200160405280600081525061381f565b5050565b600061339e8473ffffffffffffffffffffffffffffffffffffffff1661387a565b15613507578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026133c76128bb565b8786866040518563ffffffff1660e01b81526004016133e9949392919061576e565b602060405180830381600087803b15801561340357600080fd5b505af192505050801561343457506040513d601f19601f8201168201806040525081019061343191906157cf565b60015b6134b7573d8060008114613464576040519150601f19603f3d011682016040523d82523d6000602084013e613469565b606091505b506000815114156134af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134a69061560e565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061350c565b600190505b949350505050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b6000600161356f84611357565b6135799190614fad565b905060006007600084815260200190815260200160002054905081811461365e576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506136e39190614fad565b9050600060096000848152602001908152602001600020549050600060088381548110613713576137126149a3565b5b906000526020600020015490508060088381548110613735576137346149a3565b5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480613784576137836157fc565b5b6001900381819060005260206000200160009055905550505050565b60006137ab83611357565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b613829838361388d565b613836600084848461337d565b613875576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161386c9061560e565b60405180910390fd5b505050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156138fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138f490615877565b60405180910390fd5b6139068161284f565b15613946576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161393d906158e3565b60405180910390fd5b6139526000838361324b565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546139a291906154da565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b828054828255906000526020600020908101928215613a97579160200282015b82811115613a96578251825591602001919060010190613a7b565b5b509050613aa49190613b2e565b5090565b828054613ab490614697565b90600052602060002090601f016020900481019282613ad65760008555613b1d565b82601f10613aef57805160ff1916838001178555613b1d565b82800160010185558215613b1d579182015b82811115613b1c578251825591602001919060010190613b01565b5b509050613b2a9190613b2e565b5090565b5b80821115613b47576000816000905550600101613b2f565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613b9481613b5f565b8114613b9f57600080fd5b50565b600081359050613bb181613b8b565b92915050565b600060208284031215613bcd57613bcc613b55565b5b6000613bdb84828501613ba2565b91505092915050565b60008115159050919050565b613bf981613be4565b82525050565b6000602082019050613c146000830184613bf0565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613c54578082015181840152602081019050613c39565b83811115613c63576000848401525b50505050565b6000601f19601f8301169050919050565b6000613c8582613c1a565b613c8f8185613c25565b9350613c9f818560208601613c36565b613ca881613c69565b840191505092915050565b60006020820190508181036000830152613ccd8184613c7a565b905092915050565b6000819050919050565b613ce881613cd5565b8114613cf357600080fd5b50565b600081359050613d0581613cdf565b92915050565b600060208284031215613d2157613d20613b55565b5b6000613d2f84828501613cf6565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613d6382613d38565b9050919050565b613d7381613d58565b82525050565b6000602082019050613d8e6000830184613d6a565b92915050565b613d9d81613d58565b8114613da857600080fd5b50565b600081359050613dba81613d94565b92915050565b60008060408385031215613dd757613dd6613b55565b5b6000613de585828601613dab565b9250506020613df685828601613cf6565b9150509250929050565b613e0981613cd5565b82525050565b6000602082019050613e246000830184613e00565b92915050565b600080600060608486031215613e4357613e42613b55565b5b6000613e5186828701613dab565b9350506020613e6286828701613dab565b9250506040613e7386828701613cf6565b9150509250925092565b6000819050919050565b613e9081613e7d565b8114613e9b57600080fd5b50565b600081359050613ead81613e87565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613ef082613c69565b810181811067ffffffffffffffff82111715613f0f57613f0e613eb8565b5b80604052505050565b6000613f22613b4b565b9050613f2e8282613ee7565b919050565b600067ffffffffffffffff821115613f4e57613f4d613eb8565b5b602082029050602081019050919050565b600080fd5b6000613f77613f7284613f33565b613f18565b90508083825260208201905060208402830185811115613f9a57613f99613f5f565b5b835b81811015613fc35780613faf8882613e9e565b845260208401935050602081019050613f9c565b5050509392505050565b600082601f830112613fe257613fe1613eb3565b5b8135613ff2848260208601613f64565b91505092915050565b6000806040838503121561401257614011613b55565b5b600061402085828601613e9e565b925050602083013567ffffffffffffffff81111561404157614040613b5a565b5b61404d85828601613fcd565b9150509250929050565b60006020828403121561406d5761406c613b55565b5b600061407b84828501613e9e565b91505092915050565b60006020828403121561409a57614099613b55565b5b60006140a884828501613dab565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6140e681613cd5565b82525050565b60006140f883836140dd565b60208301905092915050565b6000602082019050919050565b600061411c826140b1565b61412681856140bc565b9350614131836140cd565b8060005b8381101561416257815161414988826140ec565b975061415483614104565b925050600181019050614135565b5085935050505092915050565b600060208201905081810360008301526141898184614111565b905092915050565b600060ff82169050919050565b6141a781614191565b81146141b257600080fd5b50565b6000813590506141c48161419e565b92915050565b600080604083850312156141e1576141e0613b55565b5b60006141ef85828601613dab565b9250506020614200858286016141b5565b9150509250929050565b61421381614191565b82525050565b600060208201905061422e600083018461420a565b92915050565b61423d81613be4565b811461424857600080fd5b50565b60008135905061425a81614234565b92915050565b6000806040838503121561427757614276613b55565b5b600061428585828601613dab565b92505060206142968582860161424b565b9150509250929050565b600067ffffffffffffffff8211156142bb576142ba613eb8565b5b602082029050602081019050919050565b60006142df6142da846142a0565b613f18565b9050808382526020820190506020840283018581111561430257614301613f5f565b5b835b8181101561432b57806143178882613cf6565b845260208401935050602081019050614304565b5050509392505050565b600082601f83011261434a57614349613eb3565b5b813561435a8482602086016142cc565b91505092915050565b60006020828403121561437957614378613b55565b5b600082013567ffffffffffffffff81111561439757614396613b5a565b5b6143a384828501614335565b91505092915050565b600080fd5b600067ffffffffffffffff8211156143cc576143cb613eb8565b5b6143d582613c69565b9050602081019050919050565b82818337600083830152505050565b60006144046143ff846143b1565b613f18565b9050828152602081018484840111156144205761441f6143ac565b5b61442b8482856143e2565b509392505050565b600082601f83011261444857614447613eb3565b5b81356144588482602086016143f1565b91505092915050565b6000806000806080858703121561447b5761447a613b55565b5b600061448987828801613dab565b945050602061449a87828801613dab565b93505060406144ab87828801613cf6565b925050606085013567ffffffffffffffff8111156144cc576144cb613b5a565b5b6144d887828801614433565b91505092959194509250565b6000602082840312156144fa576144f9613b55565b5b6000614508848285016141b5565b91505092915050565b60006020828403121561452757614526613b55565b5b60006145358482850161424b565b91505092915050565b600067ffffffffffffffff82111561455957614558613eb8565b5b61456282613c69565b9050602081019050919050565b600061458261457d8461453e565b613f18565b90508281526020810184848401111561459e5761459d6143ac565b5b6145a98482856143e2565b509392505050565b600082601f8301126145c6576145c5613eb3565b5b81356145d684826020860161456f565b91505092915050565b6000602082840312156145f5576145f4613b55565b5b600082013567ffffffffffffffff81111561461357614612613b5a565b5b61461f848285016145b1565b91505092915050565b6000806040838503121561463f5761463e613b55565b5b600061464d85828601613dab565b925050602061465e85828601613dab565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806146af57607f821691505b602082108114156146c3576146c2614668565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000614725602c83613c25565b9150614730826146c9565b604082019050919050565b6000602082019050818103600083015261475481614718565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006147b7602183613c25565b91506147c28261475b565b604082019050919050565b600060208201905081810360008301526147e6816147aa565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000614849603883613c25565b9150614854826147ed565b604082019050919050565b600060208201905081810360008301526148788161483c565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b60006148db603183613c25565b91506148e68261487f565b604082019050919050565b6000602082019050818103600083015261490a816148ce565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b600061496d602b83613c25565b915061497882614911565b604082019050919050565b6000602082019050818103600083015261499c81614960565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b6149ed6149e882613e7d565b6149d2565b82525050565b60006149ff82856149dc565b602082019150614a0f82846149dc565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614a5982613cd5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614a8c57614a8b614a1f565b5b600182019050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614acd602083613c25565b9150614ad882614a97565b602082019050919050565b60006020820190508181036000830152614afc81614ac0565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000614b5f602c83613c25565b9150614b6a82614b03565b604082019050919050565b60006020820190508181036000830152614b8e81614b52565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b6000614bf1602983613c25565b9150614bfc82614b95565b604082019050919050565b60006020820190508181036000830152614c2081614be4565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000614c83602a83613c25565b9150614c8e82614c27565b604082019050919050565b60006020820190508181036000830152614cb281614c76565b9050919050565b7f546f6b656e20646f6573206e6f74206578697374000000000000000000000000600082015250565b6000614cef601483613c25565b9150614cfa82614cb9565b602082019050919050565b60006020820190508181036000830152614d1e81614ce2565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000614d5b601983613c25565b9150614d6682614d25565b602082019050919050565b60006020820190508181036000830152614d8a81614d4e565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000614dc7601083613c25565b9150614dd282614d91565b602082019050919050565b60006020820190508181036000830152614df681614dba565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614e33601f83613c25565b9150614e3e82614dfd565b602082019050919050565b60006020820190508181036000830152614e6281614e26565b9050919050565b7f57686974656c697374206973206e6f7420616374697665000000000000000000600082015250565b6000614e9f601783613c25565b9150614eaa82614e69565b602082019050919050565b60006020820190508181036000830152614ece81614e92565b9050919050565b7f4e6f7420656e6f7567687420424e420000000000000000000000000000000000600082015250565b6000614f0b600f83613c25565b9150614f1682614ed5565b602082019050919050565b60006020820190508181036000830152614f3a81614efe565b9050919050565b7f4e6f742077686974656c69737465640000000000000000000000000000000000600082015250565b6000614f77600f83613c25565b9150614f8282614f41565b602082019050919050565b60006020820190508181036000830152614fa681614f6a565b9050919050565b6000614fb882613cd5565b9150614fc383613cd5565b925082821015614fd657614fd5614a1f565b5b828203905092915050565b600081905092915050565b6000614ff782613c1a565b6150018185614fe1565b9350615011818560208601613c36565b80840191505092915050565b60006150298285614fec565b91506150358284614fec565b91508190509392505050565b7f57686974656c6973742069732061637469766500000000000000000000000000600082015250565b6000615077601383613c25565b915061508282615041565b602082019050919050565b600060208201905081810360008301526150a68161506a565b9050919050565b7f53616c657320696e20424e4220617265206e6f74207065726d69747465640000600082015250565b60006150e3601e83613c25565b91506150ee826150ad565b602082019050919050565b60006020820190508181036000830152615112816150d6565b9050919050565b600060408201905061512e6000830185613d6a565b61513b6020830184613d6a565b9392505050565b60008151905061515181613cdf565b92915050565b60006020828403121561516d5761516c613b55565b5b600061517b84828501615142565b91505092915050565b7f4e6f7420656e6f7567687420616c6c6f77616e63650000000000000000000000600082015250565b60006151ba601583613c25565b91506151c582615184565b602082019050919050565b600060208201905081810360008301526151e9816151ad565b9050919050565b60006060820190506152056000830186613d6a565b6152126020830185613d6a565b61521f6040830184613e00565b949350505050565b60008151905061523681614234565b92915050565b60006020828403121561525257615251613b55565b5b600061526084828501615227565b91505092915050565b600060408201905061527e6000830185613d6a565b61528b6020830184613e00565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006152ee602683613c25565b91506152f982615292565b604082019050919050565b6000602082019050818103600083015261531d816152e1565b9050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000615380602c83613c25565b915061538b82615324565b604082019050919050565b600060208201905081810360008301526153af81615373565b9050919050565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b6000615412602983613c25565b915061541d826153b6565b604082019050919050565b6000602082019050818103600083015261544181615405565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006154a4602483613c25565b91506154af82615448565b604082019050919050565b600060208201905081810360008301526154d381615497565b9050919050565b60006154e582613cd5565b91506154f083613cd5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561552557615524614a1f565b5b828201905092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000615566601483613c25565b915061557182615530565b602082019050919050565b6000602082019050818103600083015261559581615559565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006155f8603283613c25565b91506156038261559c565b604082019050919050565b60006020820190508181036000830152615627816155eb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061566882613cd5565b915061567383613cd5565b9250826156835761568261562e565b5b828204905092915050565b600061569982613cd5565b91506156a483613cd5565b9250826156b4576156b361562e565b5b828206905092915050565b60006156ca82613cd5565b91506156d583613cd5565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561570e5761570d614a1f565b5b828202905092915050565b600081519050919050565b600082825260208201905092915050565b600061574082615719565b61574a8185615724565b935061575a818560208601613c36565b61576381613c69565b840191505092915050565b60006080820190506157836000830187613d6a565b6157906020830186613d6a565b61579d6040830185613e00565b81810360608301526157af8184615735565b905095945050505050565b6000815190506157c981613b8b565b92915050565b6000602082840312156157e5576157e4613b55565b5b60006157f3848285016157ba565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000615861602083613c25565b915061586c8261582b565b602082019050919050565b6000602082019050818103600083015261589081615854565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006158cd601c83613c25565b91506158d882615897565b602082019050919050565b600060208201905081810360008301526158fc816158c0565b905091905056fea264697066735822122009c5d25b61a5054310b6ac50253f0ef45651389ced13ef58393f0a6f9efaca8064736f6c6343000809003368747470733a2f2f6261636b656e642e63727970746f627572676572732e696f2f6d657461646174612f",
  "deployedBytecode": "0x60806040526004361061025c5760003560e01c8063715018a611610144578063c0fb5e8f116100b6578063e0d5f5db1161007a578063e0d5f5db14610973578063e40e97a7146109b0578063e985e9c5146109d9578063f09542b314610a16578063f2fde38b14610a46578063fc1a1c3614610a6f5761025c565b8063c0fb5e8f14610889578063c87b56dd146108a5578063ca847633146108e2578063d124d28f1461090d578063d9583b9f1461094a5761025c565b80638cba90b0116101085780638cba90b0146107675780638da5cb5b146107a457806395d89b41146107cf578063a22cb465146107fa578063a69a6e8214610823578063b88d4fde146108605761025c565b8063715018a61461066e57806379d72794146106855780637b125a1d146106c25780638456cb59146106ff57806387ddb7b71461072a5761025c565b80632f745c59116101dd57806342842e0e116101a157806342842e0e14610526578063438b63001461054f5780634f6ccce71461058c5780635c975abb146105c95780636352211e146105f457806370a08231146106315761025c565b80632f745c5914610441578063329ea90d1461047e5780633ccfd60b146104bb5780633d59cd60146104d25780633f4ba83a146104fb5761025c565b8063120f91d511610224578063120f91d51461035a578063158d9ac31461039757806318160ddd146103c257806323b872dd146103ed57806329c7f1fa146104165761025c565b806301ffc9a71461026157806302ce58131461029e57806306fdde03146102c9578063081812fc146102f4578063095ea7b314610331575b600080fd5b34801561026d57600080fd5b5061028860048036038101906102839190613bb7565b610a9a565b6040516102959190613bff565b60405180910390f35b3480156102aa57600080fd5b506102b3610b14565b6040516102c09190613bff565b60405180910390f35b3480156102d557600080fd5b506102de610b27565b6040516102eb9190613cb3565b60405180910390f35b34801561030057600080fd5b5061031b60048036038101906103169190613d0b565b610bb9565b6040516103289190613d79565b60405180910390f35b34801561033d57600080fd5b5061035860048036038101906103539190613dc0565b610c3e565b005b34801561036657600080fd5b50610381600480360381019061037c9190613d0b565b610d56565b60405161038e9190613e0f565b60405180910390f35b3480156103a357600080fd5b506103ac610d7a565b6040516103b99190613bff565b60405180910390f35b3480156103ce57600080fd5b506103d7610d8d565b6040516103e49190613e0f565b60405180910390f35b3480156103f957600080fd5b50610414600480360381019061040f9190613e2a565b610d9a565b005b34801561042257600080fd5b5061042b610dfa565b6040516104389190613bff565b60405180910390f35b34801561044d57600080fd5b5061046860048036038101906104639190613dc0565b610e0d565b6040516104759190613e0f565b60405180910390f35b34801561048a57600080fd5b506104a560048036038101906104a09190613ffb565b610eb2565b6040516104b29190613bff565b60405180910390f35b3480156104c757600080fd5b506104d0610f6a565b005b3480156104de57600080fd5b506104f960048036038101906104f49190614057565b61103c565b005b34801561050757600080fd5b506105106110c2565b60405161051d9190613bff565b60405180910390f35b34801561053257600080fd5b5061054d60048036038101906105489190613e2a565b61114f565b005b34801561055b57600080fd5b5061057660048036038101906105719190614084565b61116f565b604051610583919061416f565b60405180910390f35b34801561059857600080fd5b506105b360048036038101906105ae9190613d0b565b61121d565b6040516105c09190613e0f565b60405180910390f35b3480156105d557600080fd5b506105de61128e565b6040516105eb9190613bff565b60405180910390f35b34801561060057600080fd5b5061061b60048036038101906106169190613d0b565b6112a5565b6040516106289190613d79565b60405180910390f35b34801561063d57600080fd5b5061065860048036038101906106539190614084565b611357565b6040516106659190613e0f565b60405180910390f35b34801561067a57600080fd5b5061068361140f565b005b34801561069157600080fd5b506106ac60048036038101906106a791906141ca565b611497565b6040516106b99190613e0f565b60405180910390f35b3480156106ce57600080fd5b506106e960048036038101906106e49190614084565b611527565b6040516106f69190613bff565b60405180910390f35b34801561070b57600080fd5b506107146115ef565b6040516107219190613bff565b60405180910390f35b34801561073657600080fd5b50610751600480360381019061074c9190613d0b565b61167c565b60405161075e9190613e0f565b60405180910390f35b34801561077357600080fd5b5061078e60048036038101906107899190613d0b565b6116a0565b60405161079b9190614219565b60405180910390f35b3480156107b057600080fd5b506107b9611712565b6040516107c69190613d79565b60405180910390f35b3480156107db57600080fd5b506107e461173c565b6040516107f19190613cb3565b60405180910390f35b34801561080657600080fd5b50610821600480360381019061081c9190614260565b6117ce565b005b34801561082f57600080fd5b5061084a60048036038101906108459190614363565b61194f565b6040516108579190613bff565b60405180910390f35b34801561086c57600080fd5b5061088760048036038101906108829190614461565b6119ed565b005b6108a3600480360381019061089e9190613ffb565b611a4f565b005b3480156108b157600080fd5b506108cc60048036038101906108c79190613d0b565b611c74565b6040516108d99190613cb3565b60405180910390f35b3480156108ee57600080fd5b506108f7611cf6565b6040516109049190613cb3565b60405180910390f35b34801561091957600080fd5b50610934600480360381019061092f91906144e4565b611d84565b6040516109419190613e0f565b60405180910390f35b34801561095657600080fd5b50610971600480360381019061096c9190614511565b6121e1565b005b34801561097f57600080fd5b5061099a60048036038101906109959190614363565b61227a565b6040516109a79190613bff565b60405180910390f35b3480156109bc57600080fd5b506109d760048036038101906109d291906145df565b612318565b005b3480156109e557600080fd5b50610a0060048036038101906109fb9190614628565b6123ae565b604051610a0d9190613bff565b60405180910390f35b610a306004803603810190610a2b91906144e4565b612442565b604051610a3d9190613e0f565b60405180910390f35b348015610a5257600080fd5b50610a6d6004803603810190610a689190614084565b61266f565b005b348015610a7b57600080fd5b50610a84612767565b604051610a919190613e0f565b60405180910390f35b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610b0d5750610b0c8261276d565b5b9050919050565b601160029054906101000a900460ff1681565b606060008054610b3690614697565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6290614697565b8015610baf5780601f10610b8457610100808354040283529160200191610baf565b820191906000526020600020905b815481529060010190602001808311610b9257829003601f168201915b5050505050905090565b6000610bc48261284f565b610c03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfa9061473b565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610c49826112a5565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610cba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb1906147cd565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610cd96128bb565b73ffffffffffffffffffffffffffffffffffffffff161480610d085750610d0781610d026128bb565b6123ae565b5b610d47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3e9061485f565b60405180910390fd5b610d5183836128c3565b505050565b600d8181548110610d6657600080fd5b906000526020600020016000915090505481565b601160019054906101000a900460ff1681565b6000600880549050905090565b610dab610da56128bb565b8261297c565b610dea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de1906148f1565b60405180910390fd5b610df5838383612a5a565b505050565b601160009054906101000a900460ff1681565b6000610e1883611357565b8210610e59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5090614983565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60008083905060005b8351811015610f5b576000848281518110610ed957610ed86149a3565b5b6020026020010151905080831015610f1b578281604051602001610efe9291906149f3565b604051602081830303815290604052805190602001209250610f47565b8083604051602001610f2e9291906149f3565b6040516020818303038152906040528051906020012092505b508080610f5390614a4e565b915050610ebb565b50601254811491505092915050565b610f726128bb565b73ffffffffffffffffffffffffffffffffffffffff16610f90611712565b73ffffffffffffffffffffffffffffffffffffffff1614610fe6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fdd90614ae3565b60405180910390fd5b6000479050610ff3611712565b73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611038573d6000803e3d6000fd5b5050565b6110446128bb565b73ffffffffffffffffffffffffffffffffffffffff16611062611712565b73ffffffffffffffffffffffffffffffffffffffff16146110b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110af90614ae3565b60405180910390fd5b8060128190555050565b60006110cc6128bb565b73ffffffffffffffffffffffffffffffffffffffff166110ea611712565b73ffffffffffffffffffffffffffffffffffffffff1614611140576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113790614ae3565b60405180910390fd5b611148612cb6565b6001905090565b61116a838383604051806020016040528060008152506119ed565b505050565b6060600061117c83611357565b905060008167ffffffffffffffff81111561119a57611199613eb8565b5b6040519080825280602002602001820160405280156111c85781602001602082028036833780820191505090505b50905060005b82811015611212576111e08582610e0d565b8282815181106111f3576111f26149a3565b5b602002602001018181525050808061120a90614a4e565b9150506111ce565b508092505050919050565b6000611227610d8d565b8210611268576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125f90614b75565b60405180910390fd5b6008828154811061127c5761127b6149a3565b5b90600052602060002001549050919050565b6000600a60009054906101000a900460ff16905090565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561134e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134590614c07565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156113c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113bf90614c99565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6114176128bb565b73ffffffffffffffffffffffffffffffffffffffff16611435611712565b73ffffffffffffffffffffffffffffffffffffffff161461148b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148290614ae3565b60405180910390fd5b6114956000612d58565b565b60006114a16128bb565b73ffffffffffffffffffffffffffffffffffffffff166114bf611712565b73ffffffffffffffffffffffffffffffffffffffff1614611515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150c90614ae3565b60405180910390fd5b61151f8383612e1e565b905092915050565b60006115316128bb565b73ffffffffffffffffffffffffffffffffffffffff1661154f611712565b73ffffffffffffffffffffffffffffffffffffffff16146115a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159c90614ae3565b60405180910390fd5b81601360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b60006115f96128bb565b73ffffffffffffffffffffffffffffffffffffffff16611617611712565b73ffffffffffffffffffffffffffffffffffffffff161461166d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166490614ae3565b60405180910390fd5b611675612ec3565b6001905090565b600e818154811061168c57600080fd5b906000526020600020016000915090505481565b60006116ab8261284f565b6116ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e190614d05565b60405180910390fd5b600c600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461174b90614697565b80601f016020809104026020016040519081016040528092919081815260200182805461177790614697565b80156117c45780601f10611799576101008083540402835291602001916117c4565b820191906000526020600020905b8154815290600101906020018083116117a757829003601f168201915b5050505050905090565b6117d66128bb565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611844576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183b90614d71565b60405180910390fd5b80600560006118516128bb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166118fe6128bb565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516119439190613bff565b60405180910390a35050565b60006119596128bb565b73ffffffffffffffffffffffffffffffffffffffff16611977611712565b73ffffffffffffffffffffffffffffffffffffffff16146119cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c490614ae3565b60405180910390fd5b81600d90805190602001906119e3929190613a5b565b5060019050919050565b6119fe6119f86128bb565b8361297c565b611a3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a34906148f1565b60405180910390fd5b611a4984848484612f66565b50505050565b611a5761128e565b15611a97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8e90614ddd565b60405180910390fd5b6002600b541415611add576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad490614e49565b60405180910390fd5b6002600b81905550601160029054906101000a900460ff16611b34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2b90614eb5565b60405180910390fd5b600d600181548110611b4957611b486149a3565b5b9060005260206000200154341015611b96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8d90614f21565b60405180910390fd5b6000611ba28383610eb2565b90508015611bbb57611bb5336002612e1e565b50611bf6565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bed90614f8d565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc600d600181548110611c2557611c246149a3565b5b906000526020600020015434611c3b9190614fad565b9081150290604051600060405180830381858888f19350505050158015611c66573d6000803e3d6000fd5b50506001600b819055505050565b6060611c7f8261284f565b611cbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb590614d05565b60405180910390fd5b611cc6612fc2565b611ccf83613054565b604051602001611ce092919061501d565b6040516020818303038152906040529050919050565b60108054611d0390614697565b80601f0160208091040260200160405190810160405280929190818152602001828054611d2f90614697565b8015611d7c5780601f10611d5157610100808354040283529160200191611d7c565b820191906000526020600020905b815481529060010190602001808311611d5f57829003601f168201915b505050505081565b6000611d8e61128e565b15611dce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc590614ddd565b60405180910390fd5b6002600b541415611e14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0b90614e49565b60405180910390fd5b6002600b81905550601160029054906101000a900460ff1615611e6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e639061508d565b60405180910390fd5b601160019054906101000a900460ff16611ebb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb2906150f9565b60405180910390fd5b600e8260ff1681548110611ed257611ed16149a3565b5b9060005260206000200154601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401611f3a929190615119565b60206040518083038186803b158015611f5257600080fd5b505afa158015611f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8a9190615157565b1015611fcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc2906151d0565b60405180910390fd5b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33612012611712565b61205a606461204c6008600e8a60ff1681548110612033576120326149a3565b5b90600052602060002001546131b590919063ffffffff16565b6131cb90919063ffffffff16565b6040518463ffffffff1660e01b8152600401612078939291906151f0565b602060405180830381600087803b15801561209257600080fd5b505af11580156120a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ca919061523c565b50601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac336121526064612144605c600e8960ff168154811061212b5761212a6149a3565b5b90600052602060002001546131b590919063ffffffff16565b6131cb90919063ffffffff16565b6040518363ffffffff1660e01b815260040161216f929190615269565b602060405180830381600087803b15801561218957600080fd5b505af115801561219d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c1919061523c565b5060006121ce3384612e1e565b9050809150506001600b81905550919050565b6121e96128bb565b73ffffffffffffffffffffffffffffffffffffffff16612207611712565b73ffffffffffffffffffffffffffffffffffffffff161461225d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225490614ae3565b60405180910390fd5b80601160026101000a81548160ff02191690831515021790555050565b60006122846128bb565b73ffffffffffffffffffffffffffffffffffffffff166122a2611712565b73ffffffffffffffffffffffffffffffffffffffff16146122f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122ef90614ae3565b60405180910390fd5b81600e908051906020019061230e929190613a5b565b5060019050919050565b6123206128bb565b73ffffffffffffffffffffffffffffffffffffffff1661233e611712565b73ffffffffffffffffffffffffffffffffffffffff1614612394576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238b90614ae3565b60405180910390fd5b80601090805190602001906123aa929190613aa8565b5050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600061244c61128e565b1561248c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248390614ddd565b60405180910390fd5b6002600b5414156124d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124c990614e49565b60405180910390fd5b6002600b81905550601160029054906101000a900460ff161561252a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125219061508d565b60405180910390fd5b601160009054906101000a900460ff16612579576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612570906150f9565b60405180910390fd5b600d8260ff16815481106125905761258f6149a3565b5b90600052602060002001543410156125dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125d490614f21565b60405180910390fd5b60006125e93384612e1e565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc600d8560ff168154811061261c5761261b6149a3565b5b9060005260206000200154346126329190614fad565b9081150290604051600060405180830381858888f1935050505015801561265d573d6000803e3d6000fd5b50809150506001600b81905550919050565b6126776128bb565b73ffffffffffffffffffffffffffffffffffffffff16612695611712565b73ffffffffffffffffffffffffffffffffffffffff16146126eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126e290614ae3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561275b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161275290615304565b60405180910390fd5b61276481612d58565b50565b600f5481565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061283857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806128485750612847826131e1565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16612936836112a5565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006129878261284f565b6129c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129bd90615396565b60405180910390fd5b60006129d1836112a5565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612a4057508373ffffffffffffffffffffffffffffffffffffffff16612a2884610bb9565b73ffffffffffffffffffffffffffffffffffffffff16145b80612a515750612a5081856123ae565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612a7a826112a5565b73ffffffffffffffffffffffffffffffffffffffff1614612ad0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ac790615428565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612b40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b37906154ba565b60405180910390fd5b612b4b83838361324b565b612b566000826128c3565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612ba69190614fad565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612bfd91906154da565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b612cbe61128e565b612cfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cf49061557c565b60405180910390fd5b6000600a60006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612d416128bb565b604051612d4e9190613d79565b60405180910390a1565b6000600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000612e3183612e2c610d8d565b61335f565b81600c6000612e3e610d8d565b815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508160ff16612e70610d8d565b8473ffffffffffffffffffffffffffffffffffffffff167faabcc1eb354f11e651c87f835e7de6ac847d514718ed76fad480d55d2632992260405160405180910390a4612ebb610d8d565b905092915050565b612ecb61128e565b15612f0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f0290614ddd565b60405180910390fd5b6001600a60006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612f4f6128bb565b604051612f5c9190613d79565b60405180910390a1565b612f71848484612a5a565b612f7d8484848461337d565b612fbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fb39061560e565b60405180910390fd5b50505050565b606060108054612fd190614697565b80601f0160208091040260200160405190810160405280929190818152602001828054612ffd90614697565b801561304a5780601f1061301f5761010080835404028352916020019161304a565b820191906000526020600020905b81548152906001019060200180831161302d57829003601f168201915b5050505050905090565b6060600082141561309c576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506131b0565b600082905060005b600082146130ce5780806130b790614a4e565b915050600a826130c7919061565d565b91506130a4565b60008167ffffffffffffffff8111156130ea576130e9613eb8565b5b6040519080825280601f01601f19166020018201604052801561311c5781602001600182028036833780820191505090505b5090505b600085146131a9576001826131359190614fad565b9150600a85613144919061568e565b603061315091906154da565b60f81b818381518110613166576131656149a3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856131a2919061565d565b9450613120565b8093505050505b919050565b600081836131c391906156bf565b905092915050565b600081836131d9919061565d565b905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b613256838383613514565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156132995761329481613519565b6132d8565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146132d7576132d68382613562565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561331b57613316816136cf565b61335a565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146133595761335882826137a0565b5b5b505050565b61337982826040518060200160405280600081525061381f565b5050565b600061339e8473ffffffffffffffffffffffffffffffffffffffff1661387a565b15613507578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026133c76128bb565b8786866040518563ffffffff1660e01b81526004016133e9949392919061576e565b602060405180830381600087803b15801561340357600080fd5b505af192505050801561343457506040513d601f19601f8201168201806040525081019061343191906157cf565b60015b6134b7573d8060008114613464576040519150601f19603f3d011682016040523d82523d6000602084013e613469565b606091505b506000815114156134af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134a69061560e565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061350c565b600190505b949350505050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b6000600161356f84611357565b6135799190614fad565b905060006007600084815260200190815260200160002054905081811461365e576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506136e39190614fad565b9050600060096000848152602001908152602001600020549050600060088381548110613713576137126149a3565b5b906000526020600020015490508060088381548110613735576137346149a3565b5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480613784576137836157fc565b5b6001900381819060005260206000200160009055905550505050565b60006137ab83611357565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b613829838361388d565b613836600084848461337d565b613875576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161386c9061560e565b60405180910390fd5b505050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156138fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138f490615877565b60405180910390fd5b6139068161284f565b15613946576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161393d906158e3565b60405180910390fd5b6139526000838361324b565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546139a291906154da565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b828054828255906000526020600020908101928215613a97579160200282015b82811115613a96578251825591602001919060010190613a7b565b5b509050613aa49190613b2e565b5090565b828054613ab490614697565b90600052602060002090601f016020900481019282613ad65760008555613b1d565b82601f10613aef57805160ff1916838001178555613b1d565b82800160010185558215613b1d579182015b82811115613b1c578251825591602001919060010190613b01565b5b509050613b2a9190613b2e565b5090565b5b80821115613b47576000816000905550600101613b2f565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613b9481613b5f565b8114613b9f57600080fd5b50565b600081359050613bb181613b8b565b92915050565b600060208284031215613bcd57613bcc613b55565b5b6000613bdb84828501613ba2565b91505092915050565b60008115159050919050565b613bf981613be4565b82525050565b6000602082019050613c146000830184613bf0565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613c54578082015181840152602081019050613c39565b83811115613c63576000848401525b50505050565b6000601f19601f8301169050919050565b6000613c8582613c1a565b613c8f8185613c25565b9350613c9f818560208601613c36565b613ca881613c69565b840191505092915050565b60006020820190508181036000830152613ccd8184613c7a565b905092915050565b6000819050919050565b613ce881613cd5565b8114613cf357600080fd5b50565b600081359050613d0581613cdf565b92915050565b600060208284031215613d2157613d20613b55565b5b6000613d2f84828501613cf6565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613d6382613d38565b9050919050565b613d7381613d58565b82525050565b6000602082019050613d8e6000830184613d6a565b92915050565b613d9d81613d58565b8114613da857600080fd5b50565b600081359050613dba81613d94565b92915050565b60008060408385031215613dd757613dd6613b55565b5b6000613de585828601613dab565b9250506020613df685828601613cf6565b9150509250929050565b613e0981613cd5565b82525050565b6000602082019050613e246000830184613e00565b92915050565b600080600060608486031215613e4357613e42613b55565b5b6000613e5186828701613dab565b9350506020613e6286828701613dab565b9250506040613e7386828701613cf6565b9150509250925092565b6000819050919050565b613e9081613e7d565b8114613e9b57600080fd5b50565b600081359050613ead81613e87565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613ef082613c69565b810181811067ffffffffffffffff82111715613f0f57613f0e613eb8565b5b80604052505050565b6000613f22613b4b565b9050613f2e8282613ee7565b919050565b600067ffffffffffffffff821115613f4e57613f4d613eb8565b5b602082029050602081019050919050565b600080fd5b6000613f77613f7284613f33565b613f18565b90508083825260208201905060208402830185811115613f9a57613f99613f5f565b5b835b81811015613fc35780613faf8882613e9e565b845260208401935050602081019050613f9c565b5050509392505050565b600082601f830112613fe257613fe1613eb3565b5b8135613ff2848260208601613f64565b91505092915050565b6000806040838503121561401257614011613b55565b5b600061402085828601613e9e565b925050602083013567ffffffffffffffff81111561404157614040613b5a565b5b61404d85828601613fcd565b9150509250929050565b60006020828403121561406d5761406c613b55565b5b600061407b84828501613e9e565b91505092915050565b60006020828403121561409a57614099613b55565b5b60006140a884828501613dab565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6140e681613cd5565b82525050565b60006140f883836140dd565b60208301905092915050565b6000602082019050919050565b600061411c826140b1565b61412681856140bc565b9350614131836140cd565b8060005b8381101561416257815161414988826140ec565b975061415483614104565b925050600181019050614135565b5085935050505092915050565b600060208201905081810360008301526141898184614111565b905092915050565b600060ff82169050919050565b6141a781614191565b81146141b257600080fd5b50565b6000813590506141c48161419e565b92915050565b600080604083850312156141e1576141e0613b55565b5b60006141ef85828601613dab565b9250506020614200858286016141b5565b9150509250929050565b61421381614191565b82525050565b600060208201905061422e600083018461420a565b92915050565b61423d81613be4565b811461424857600080fd5b50565b60008135905061425a81614234565b92915050565b6000806040838503121561427757614276613b55565b5b600061428585828601613dab565b92505060206142968582860161424b565b9150509250929050565b600067ffffffffffffffff8211156142bb576142ba613eb8565b5b602082029050602081019050919050565b60006142df6142da846142a0565b613f18565b9050808382526020820190506020840283018581111561430257614301613f5f565b5b835b8181101561432b57806143178882613cf6565b845260208401935050602081019050614304565b5050509392505050565b600082601f83011261434a57614349613eb3565b5b813561435a8482602086016142cc565b91505092915050565b60006020828403121561437957614378613b55565b5b600082013567ffffffffffffffff81111561439757614396613b5a565b5b6143a384828501614335565b91505092915050565b600080fd5b600067ffffffffffffffff8211156143cc576143cb613eb8565b5b6143d582613c69565b9050602081019050919050565b82818337600083830152505050565b60006144046143ff846143b1565b613f18565b9050828152602081018484840111156144205761441f6143ac565b5b61442b8482856143e2565b509392505050565b600082601f83011261444857614447613eb3565b5b81356144588482602086016143f1565b91505092915050565b6000806000806080858703121561447b5761447a613b55565b5b600061448987828801613dab565b945050602061449a87828801613dab565b93505060406144ab87828801613cf6565b925050606085013567ffffffffffffffff8111156144cc576144cb613b5a565b5b6144d887828801614433565b91505092959194509250565b6000602082840312156144fa576144f9613b55565b5b6000614508848285016141b5565b91505092915050565b60006020828403121561452757614526613b55565b5b60006145358482850161424b565b91505092915050565b600067ffffffffffffffff82111561455957614558613eb8565b5b61456282613c69565b9050602081019050919050565b600061458261457d8461453e565b613f18565b90508281526020810184848401111561459e5761459d6143ac565b5b6145a98482856143e2565b509392505050565b600082601f8301126145c6576145c5613eb3565b5b81356145d684826020860161456f565b91505092915050565b6000602082840312156145f5576145f4613b55565b5b600082013567ffffffffffffffff81111561461357614612613b5a565b5b61461f848285016145b1565b91505092915050565b6000806040838503121561463f5761463e613b55565b5b600061464d85828601613dab565b925050602061465e85828601613dab565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806146af57607f821691505b602082108114156146c3576146c2614668565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000614725602c83613c25565b9150614730826146c9565b604082019050919050565b6000602082019050818103600083015261475481614718565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006147b7602183613c25565b91506147c28261475b565b604082019050919050565b600060208201905081810360008301526147e6816147aa565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000614849603883613c25565b9150614854826147ed565b604082019050919050565b600060208201905081810360008301526148788161483c565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b60006148db603183613c25565b91506148e68261487f565b604082019050919050565b6000602082019050818103600083015261490a816148ce565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b600061496d602b83613c25565b915061497882614911565b604082019050919050565b6000602082019050818103600083015261499c81614960565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b6149ed6149e882613e7d565b6149d2565b82525050565b60006149ff82856149dc565b602082019150614a0f82846149dc565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614a5982613cd5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614a8c57614a8b614a1f565b5b600182019050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614acd602083613c25565b9150614ad882614a97565b602082019050919050565b60006020820190508181036000830152614afc81614ac0565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000614b5f602c83613c25565b9150614b6a82614b03565b604082019050919050565b60006020820190508181036000830152614b8e81614b52565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b6000614bf1602983613c25565b9150614bfc82614b95565b604082019050919050565b60006020820190508181036000830152614c2081614be4565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000614c83602a83613c25565b9150614c8e82614c27565b604082019050919050565b60006020820190508181036000830152614cb281614c76565b9050919050565b7f546f6b656e20646f6573206e6f74206578697374000000000000000000000000600082015250565b6000614cef601483613c25565b9150614cfa82614cb9565b602082019050919050565b60006020820190508181036000830152614d1e81614ce2565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000614d5b601983613c25565b9150614d6682614d25565b602082019050919050565b60006020820190508181036000830152614d8a81614d4e565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000614dc7601083613c25565b9150614dd282614d91565b602082019050919050565b60006020820190508181036000830152614df681614dba565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614e33601f83613c25565b9150614e3e82614dfd565b602082019050919050565b60006020820190508181036000830152614e6281614e26565b9050919050565b7f57686974656c697374206973206e6f7420616374697665000000000000000000600082015250565b6000614e9f601783613c25565b9150614eaa82614e69565b602082019050919050565b60006020820190508181036000830152614ece81614e92565b9050919050565b7f4e6f7420656e6f7567687420424e420000000000000000000000000000000000600082015250565b6000614f0b600f83613c25565b9150614f1682614ed5565b602082019050919050565b60006020820190508181036000830152614f3a81614efe565b9050919050565b7f4e6f742077686974656c69737465640000000000000000000000000000000000600082015250565b6000614f77600f83613c25565b9150614f8282614f41565b602082019050919050565b60006020820190508181036000830152614fa681614f6a565b9050919050565b6000614fb882613cd5565b9150614fc383613cd5565b925082821015614fd657614fd5614a1f565b5b828203905092915050565b600081905092915050565b6000614ff782613c1a565b6150018185614fe1565b9350615011818560208601613c36565b80840191505092915050565b60006150298285614fec565b91506150358284614fec565b91508190509392505050565b7f57686974656c6973742069732061637469766500000000000000000000000000600082015250565b6000615077601383613c25565b915061508282615041565b602082019050919050565b600060208201905081810360008301526150a68161506a565b9050919050565b7f53616c657320696e20424e4220617265206e6f74207065726d69747465640000600082015250565b60006150e3601e83613c25565b91506150ee826150ad565b602082019050919050565b60006020820190508181036000830152615112816150d6565b9050919050565b600060408201905061512e6000830185613d6a565b61513b6020830184613d6a565b9392505050565b60008151905061515181613cdf565b92915050565b60006020828403121561516d5761516c613b55565b5b600061517b84828501615142565b91505092915050565b7f4e6f7420656e6f7567687420616c6c6f77616e63650000000000000000000000600082015250565b60006151ba601583613c25565b91506151c582615184565b602082019050919050565b600060208201905081810360008301526151e9816151ad565b9050919050565b60006060820190506152056000830186613d6a565b6152126020830185613d6a565b61521f6040830184613e00565b949350505050565b60008151905061523681614234565b92915050565b60006020828403121561525257615251613b55565b5b600061526084828501615227565b91505092915050565b600060408201905061527e6000830185613d6a565b61528b6020830184613e00565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006152ee602683613c25565b91506152f982615292565b604082019050919050565b6000602082019050818103600083015261531d816152e1565b9050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000615380602c83613c25565b915061538b82615324565b604082019050919050565b600060208201905081810360008301526153af81615373565b9050919050565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b6000615412602983613c25565b915061541d826153b6565b604082019050919050565b6000602082019050818103600083015261544181615405565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006154a4602483613c25565b91506154af82615448565b604082019050919050565b600060208201905081810360008301526154d381615497565b9050919050565b60006154e582613cd5565b91506154f083613cd5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561552557615524614a1f565b5b828201905092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000615566601483613c25565b915061557182615530565b602082019050919050565b6000602082019050818103600083015261559581615559565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006155f8603283613c25565b91506156038261559c565b604082019050919050565b60006020820190508181036000830152615627816155eb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061566882613cd5565b915061567383613cd5565b9250826156835761568261562e565b5b828204905092915050565b600061569982613cd5565b91506156a483613cd5565b9250826156b4576156b361562e565b5b828206905092915050565b60006156ca82613cd5565b91506156d583613cd5565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561570e5761570d614a1f565b5b828202905092915050565b600081519050919050565b600082825260208201905092915050565b600061574082615719565b61574a8185615724565b935061575a818560208601613c36565b61576381613c69565b840191505092915050565b60006080820190506157836000830187613d6a565b6157906020830186613d6a565b61579d6040830185613e00565b81810360608301526157af8184615735565b905095945050505050565b6000815190506157c981613b8b565b92915050565b6000602082840312156157e5576157e4613b55565b5b60006157f3848285016157ba565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000615861602083613c25565b915061586c8261582b565b602082019050919050565b6000602082019050818103600083015261589081615854565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006158cd601c83613c25565b91506158d882615897565b602082019050919050565b600060208201905081810360008301526158fc816158c0565b905091905056fea264697066735822122009c5d25b61a5054310b6ac50253f0ef45651389ced13ef58393f0a6f9efaca8064736f6c63430008090033",
>>>>>>> 27470beba0b425e4312be47dd5af57d3eb42ba9d
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
<<<<<<< HEAD
        "astId": 4068,
        "contract": "contracts/Burger.sol:Burger",
=======
        "astId": 2038,
        "contract": "contracts/Burguer.sol:Burger",
>>>>>>> 27470beba0b425e4312be47dd5af57d3eb42ba9d
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
<<<<<<< HEAD
        "astId": 4070,
        "contract": "contracts/Burger.sol:Burger",
=======
        "astId": 2040,
        "contract": "contracts/Burguer.sol:Burger",
>>>>>>> 27470beba0b425e4312be47dd5af57d3eb42ba9d
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
<<<<<<< HEAD
        "astId": 4074,
        "contract": "contracts/Burger.sol:Burger",
=======
        "astId": 2044,
        "contract": "contracts/Burguer.sol:Burger",
>>>>>>> 27470beba0b425e4312be47dd5af57d3eb42ba9d
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
<<<<<<< HEAD
        "astId": 4078,
        "contract": "contracts/Burger.sol:Burger",
=======
        "astId": 2048,
        "contract": "contracts/Burguer.sol:Burger",
>>>>>>> 27470beba0b425e4312be47dd5af57d3eb42ba9d
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
<<<<<<< HEAD
        "astId": 4082,
        "contract": "contracts/Burger.sol:Burger",
=======
        "astId": 2052,
        "contract": "contracts/Burguer.sol:Burger",
>>>>>>> 27470beba0b425e4312be47dd5af57d3eb42ba9d
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
<<<<<<< HEAD
        "astId": 4088,
        "contract": "contracts/Burger.sol:Burger",
=======
        "astId": 2058,
        "contract": "contracts/Burguer.sol:Burger",
>>>>>>> 27470beba0b425e4312be47dd5af57d3eb42ba9d
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
<<<<<<< HEAD
        "astId": 5007,
        "contract": "contracts/Burger.sol:Burger",
=======
        "astId": 2977,
        "contract": "contracts/Burguer.sol:Burger",
>>>>>>> 27470beba0b425e4312be47dd5af57d3eb42ba9d
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
<<<<<<< HEAD
        "astId": 5011,
        "contract": "contracts/Burger.sol:Burger",
=======
        "astId": 2981,
        "contract": "contracts/Burguer.sol:Burger",
>>>>>>> 27470beba0b425e4312be47dd5af57d3eb42ba9d
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
<<<<<<< HEAD
        "astId": 5014,
        "contract": "contracts/Burger.sol:Burger",
=======
        "astId": 2984,
        "contract": "contracts/Burguer.sol:Burger",
>>>>>>> 27470beba0b425e4312be47dd5af57d3eb42ba9d
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
<<<<<<< HEAD
        "astId": 5018,
        "contract": "contracts/Burger.sol:Burger",
=======
        "astId": 2988,
        "contract": "contracts/Burguer.sol:Burger",
>>>>>>> 27470beba0b425e4312be47dd5af57d3eb42ba9d
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
<<<<<<< HEAD
        "astId": 3850,
        "contract": "contracts/Burger.sol:Burger",
=======
        "astId": 861,
        "contract": "contracts/Burguer.sol:Burger",
>>>>>>> 27470beba0b425e4312be47dd5af57d3eb42ba9d
        "label": "_paused",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
<<<<<<< HEAD
        "astId": 3736,
        "contract": "contracts/Burger.sol:Burger",
=======
        "astId": 747,
        "contract": "contracts/Burguer.sol:Burger",
>>>>>>> 27470beba0b425e4312be47dd5af57d3eb42ba9d
        "label": "_owner",
        "offset": 1,
        "slot": "10",
        "type": "t_address"
      },
      {
<<<<<<< HEAD
        "astId": 3935,
        "contract": "contracts/Burger.sol:Burger",
=======
        "astId": 946,
        "contract": "contracts/Burguer.sol:Burger",
>>>>>>> 27470beba0b425e4312be47dd5af57d3eb42ba9d
        "label": "_status",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
<<<<<<< HEAD
        "astId": 2691,
        "contract": "contracts/Burger.sol:Burger",
=======
        "astId": 115,
        "contract": "contracts/Burguer.sol:Burger",
>>>>>>> 27470beba0b425e4312be47dd5af57d3eb42ba9d
        "label": "boxTypeById",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint8)"
      },
      {
<<<<<<< HEAD
        "astId": 2702,
        "contract": "contracts/Burger.sol:Burger",
=======
        "astId": 126,
        "contract": "contracts/Burguer.sol:Burger",
>>>>>>> 27470beba0b425e4312be47dd5af57d3eb42ba9d
        "label": "boxPriceBNB",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
<<<<<<< HEAD
        "astId": 2707,
        "contract": "contracts/Burger.sol:Burger",
        "label": "whitelistPrice",
=======
        "astId": 137,
        "contract": "contracts/Burguer.sol:Burger",
        "label": "boxPriceBURG",
>>>>>>> 27470beba0b425e4312be47dd5af57d3eb42ba9d
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 142,
        "contract": "contracts/Burguer.sol:Burger",
        "label": "whitelistPrice",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
<<<<<<< HEAD
        "astId": 2710,
        "contract": "contracts/Burger.sol:Burger",
=======
        "astId": 145,
        "contract": "contracts/Burguer.sol:Burger",
>>>>>>> 27470beba0b425e4312be47dd5af57d3eb42ba9d
        "label": "strBaseTokenURI",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
<<<<<<< HEAD
        "astId": 2713,
        "contract": "contracts/Burger.sol:Burger",
        "label": "whitelistActive",
=======
        "astId": 148,
        "contract": "contracts/Burguer.sol:Burger",
        "label": "saleBNBEnabled",
>>>>>>> 27470beba0b425e4312be47dd5af57d3eb42ba9d
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      },
      {
<<<<<<< HEAD
        "astId": 2716,
        "contract": "contracts/Burger.sol:Burger",
=======
        "astId": 151,
        "contract": "contracts/Burguer.sol:Burger",
        "label": "saleBURGEnabled",
        "offset": 1,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 154,
        "contract": "contracts/Burguer.sol:Burger",
        "label": "whitelistActive",
        "offset": 2,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 157,
        "contract": "contracts/Burguer.sol:Burger",
>>>>>>> 27470beba0b425e4312be47dd5af57d3eb42ba9d
        "label": "root",
        "offset": 0,
        "slot": "18",
        "type": "t_bytes32"
      },
      {
        "astId": 159,
        "contract": "contracts/Burguer.sol:Burger",
        "label": "BURG",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint8)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}